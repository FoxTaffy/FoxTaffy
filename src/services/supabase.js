/**
 * ü¶ä FOX TAFFY - –ß–ò–°–¢–´–ô API –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ô
 * 
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ —Å –ø–æ–ª–Ω—ã–º —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º
 * –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 * 
 * @version 1.0.0
 * @author Fox Taffy
 */

import { createClient } from '@supabase/supabase-js'

// ============================================
// üîß –ë–ê–ó–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
// ============================================

const supabaseUrl = 'https://zrhdxmrouqcdnhbbrjcj.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpyaGR4bXJvdXFjZG5oYmJyamNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2Mzg2NDAsImV4cCI6MjA2NzIxNDY0MH0.LeiMfJToPntdPytjXykS-XCPsLVDXUWSpy5Ny1fC5nw'

export const supabase = createClient(supabaseUrl, supabaseKey)

// ============================================
// üîê –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
// ============================================

/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏
 */
const authenticationAPI = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   * @param {string} password –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–æ–ª—å
   * @returns {Promise<{success: boolean, error?: string}>}
   */
  async login(password) {
    const CORRECT_PASSWORD = '2020'
    
    if (password === CORRECT_PASSWORD) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–∞ 24 —á–∞—Å–∞
      localStorage.setItem('foxtaffy_debt_auth', 'authenticated')
      localStorage.setItem('foxtaffy_debt_auth_timestamp', Date.now().toString())
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
      return { success: true }
    }
    
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' }
  },
  
  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
   */
  async logout() {
    localStorage.removeItem('foxtaffy_debt_auth')
    localStorage.removeItem('foxtaffy_debt_auth_timestamp')
    console.log('üö™ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  },
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   * @returns {Promise<boolean>}
   */
  async isAuthenticated() {
    const authStatus = localStorage.getItem('foxtaffy_debt_auth')
    const authTimestamp = localStorage.getItem('foxtaffy_debt_auth_timestamp')
    
    if (!authStatus || !authTimestamp) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (24 —á–∞—Å–∞ = 86400000 –º—Å)
    const sessionAge = Date.now() - parseInt(authTimestamp)
    const SESSION_DURATION = 24 * 60 * 60 * 1000
    
    if (sessionAge > SESSION_DURATION) {
      await this.logout()
      return false
    }
    
    return true
  }
}

// ============================================
// üí∞ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –î–û–õ–ì–ê–ú–ò
// ============================================

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª CRUD –æ–ø–µ—Ä–∞—Ü–∏–π, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const debtManagementAPI = {
  
  // ================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò =================
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<boolean>}
   */
  async initializeSystem() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏...')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–≥–æ–≤
      const { data, error } = await supabase
        .from('debts')
        .select('id')
        .limit(1)
      
      if (error) {
        if (error.code === '42P01') {
          console.error('‚ùå –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!')
          console.log('üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü')
          return false
        }
        throw error
      }
      
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞–º–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
      return true
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      return false
    }
  },
  
  // ================= –û–ü–ï–†–ê–¶–ò–ò –° –î–û–õ–ì–ê–ú–ò =================
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–≥–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
   * @returns {Promise<Array>}
   */
  async getAllDebts() {
    try {
      const { data, error } = await supabase
        .from('debts')
        .select('*')
        .eq('is_active', true)
        .order('priority', { ascending: true })
      
      if (error) throw error
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ–≤—ã–µ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const processedDebts = data.map(debt => ({
        ...debt,
        current_balance: parseFloat(debt.current_balance || 0),
        original_amount: parseFloat(debt.original_amount || 0),
        interest_rate: parseFloat(debt.interest_rate || 0),
        minimum_payment: parseFloat(debt.minimum_payment || 0)
      }))
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedDebts.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤`)
      return processedDebts
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤:', error)
      return []
    }
  },
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–≥–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
   * @param {number} debtId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–≥–∞
   * @param {number} paymentAmount –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
   */
  async updateDebtBalance(debtId, paymentAmount) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–≥–∞
      const { data: currentDebt, error: fetchError } = await supabase
        .from('debts')
        .select('current_balance, name')
        .eq('id', debtId)
        .single()
      
      if (fetchError) throw fetchError
      
      const oldBalance = parseFloat(currentDebt.current_balance)
      const newBalance = Math.max(0, oldBalance - paymentAmount)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error: updateError } = await supabase
        .from('debts')
        .update({ 
          current_balance: newBalance,
          updated_at: new Date().toISOString(),
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ–ª–≥ –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω
          is_active: newBalance > 0
        })
        .eq('id', debtId)
      
      if (updateError) throw updateError
      
      console.log(`üí∞ –î–æ–ª–≥ "${currentDebt.name}": ${oldBalance}‚ÇΩ ‚Üí ${newBalance}‚ÇΩ`)
      
      if (newBalance === 0) {
        console.log(`üéâ –î–æ–ª–≥ "${currentDebt.name}" –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!`)
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–≥–∞:', error)
      throw error
    }
  },
  
  // ================= –û–ü–ï–†–ê–¶–ò–ò –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò =================
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @param {string|null} startDate –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (YYYY-MM-DD)
   * @param {string|null} endDate –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (YYYY-MM-DD)
   * @returns {Promise<Array>}
   */
  async getTransactionHistory(startDate = null, endDate = null) {
    try {
      let query = supabase
        .from('transactions')
        .select(`
          *,
          debt:debts(name, type)
        `)
        .order('transaction_date', { ascending: false })
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
      if (startDate) query = query.gte('transaction_date', startDate)
      if (endDate) query = query.lte('transaction_date', endDate)
      
      const { data, error } = await query
      if (error) throw error
      
      const processedTransactions = data.map(transaction => ({
        ...transaction,
        amount: parseFloat(transaction.amount || 0)
      }))
      
      console.log(`üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
      return processedTransactions
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
      return []
    }
  },
  
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞ (–¥–æ–Ω–∞—Ç—ã, –ø–æ–¥–∞—Ä–∫–∏ –∏ —Ç.–¥.)
   * @param {number} amount –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞
   * @param {string} description –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–∞
   * @param {string} category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞
   * @returns {Promise<Object>}
   */
  async addIncome(amount, description, category = 'donation') {
    try {
      const { data, error } = await supabase
        .from('transactions')
        .insert([{
          type: 'income',
          amount: parseFloat(amount),
          description: description || '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
          category: category,
          transaction_date: new Date().toISOString().split('T')[0]
        }])
        .select()
      
      if (error) throw error
      
      console.log(`üíö –î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: ${amount}‚ÇΩ (${description})`)
      return data[0]
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞:', error)
      throw error
    }
  },
  
  /**
   * –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –¥–æ–ª–≥—É
   * @param {number} debtId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–≥–∞
   * @param {number} amount –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
   * @param {string} description –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   * @returns {Promise<Object>}
   */
  async processPayment(debtId, amount, description = '') {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const { data, error } = await supabase
        .from('transactions')
        .insert([{
          type: 'payment',
          amount: parseFloat(amount),
          description: description || '–ü–ª–∞—Ç–µ–∂ –ø–æ –¥–æ–ª–≥—É',
          debt_id: debtId,
          transaction_date: new Date().toISOString().split('T')[0]
        }])
        .select()
      
      if (error) throw error
      
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ–ª–≥–∞
      await this.updateDebtBalance(debtId, parseFloat(amount))
      
      console.log(`üí∏ –ü—Ä–æ–≤–µ–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: ${amount}‚ÇΩ`)
      return data[0]
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error)
      throw error
    }
  },
  
  // ================= –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï =================
  
  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @returns {Promise<Object>}
   */
  async getFinancialAnalytics() {
    try {
      console.log('üìä –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...')
      
      const [debts, transactions] = await Promise.all([
        this.getAllDebts(),
        this.getTransactionHistory()
      ])
      
      // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const totalDebt = debts.reduce((sum, debt) => sum + debt.current_balance, 0)
      const totalOriginalDebt = debts.reduce((sum, debt) => sum + debt.original_amount, 0)
      const totalPaid = totalOriginalDebt - totalDebt
      
      const totalIncome = transactions
        .filter(t => t.type === 'income')
        .reduce((sum, t) => sum + t.amount, 0)
      
      const totalPayments = transactions
        .filter(t => t.type === 'payment')
        .reduce((sum, t) => sum + t.amount, 0)
      
      const minimumMonthlyPayment = debts.reduce((sum, debt) => sum + debt.minimum_payment, 0)
      
      // –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤
      const MONTHLY_SALARY = 100000
      const ESTIMATED_LIVING_EXPENSES = 50000
      const availableForDebt = MONTHLY_SALARY - ESTIMATED_LIVING_EXPENSES
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è
      const paymentStrategy = this.calculateOptimalStrategy(debts, availableForDebt)
      
      // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
      const averageInterestRate = debts.length > 0 
        ? debts.reduce((sum, debt) => sum + debt.interest_rate, 0) / debts.length 
        : 0
      
      const analytics = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        totalDebt,
        totalOriginalDebt,
        totalPaid,
        totalIncome,
        totalPayments,
        
        // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        minimumMonthlyPayment,
        availableForDebt,
        averageInterestRate,
        
        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
        paymentStrategy,
        debtsByPriority: debts.sort((a, b) => b.interest_rate - a.interest_rate),
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        debtPayoffProgress: totalOriginalDebt > 0 ? (totalPaid / totalOriginalDebt) * 100 : 0,
        monthlyInterestCost: this.calculateMonthlyInterestCost(debts)
      }
      
      console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞')
      return analytics
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error)
      return null
    }
  },
  
  /**
   * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ "–ª–∞–≤–∏–Ω—ã –¥–æ–ª–≥–æ–≤" (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º)
   * @param {Array} debts –ú–∞—Å—Å–∏–≤ –¥–æ–ª–≥–æ–≤
   * @param {number} availableAmount –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è
   * @returns {Array}
   */
  calculateOptimalStrategy(debts, availableAmount) {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    const sortedDebts = [...debts].sort((a, b) => b.interest_rate - a.interest_rate)
    
    let remainingBudget = availableAmount
    const strategy = []
    
    for (const debt of sortedDebts) {
      if (remainingBudget <= 0) break
      
      const minimumRequired = debt.minimum_payment
      const maxPossible = Math.min(remainingBudget, debt.current_balance)
      const recommendedPayment = Math.max(minimumRequired, maxPossible)
      
      // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è
      const monthsToPayoff = this.estimatePayoffTime(
        debt.current_balance, 
        recommendedPayment, 
        debt.interest_rate
      )
      
      strategy.push({
        debtId: debt.id,
        debtName: debt.name,
        currentBalance: debt.current_balance,
        interestRate: debt.interest_rate,
        minimumPayment: debt.minimum_payment,
        recommendedPayment,
        monthsToPayoff,
        priority: debt.priority,
        potentialSavings: this.calculateInterestSavings(debt, recommendedPayment)
      })
      
      remainingBudget -= recommendedPayment
    }
    
    return strategy
  },
  
  /**
   * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
   * @param {number} balance –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
   * @param {number} monthlyPayment –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   * @param {number} annualInterestRate –ì–æ–¥–æ–≤–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
   * @returns {number}
   */
  estimatePayoffTime(balance, monthlyPayment, annualInterestRate) {
    if (annualInterestRate === 0) {
      return Math.ceil(balance / monthlyPayment)
    }
    
    const monthlyRate = annualInterestRate / 100 / 12
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –ª–∏ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    if (monthlyPayment <= balance * monthlyRate) {
      return 999 // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å (–ø–ª–∞—Ç–µ–∂ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω)
    }
    
    return Math.ceil(
      Math.log(1 + (balance * monthlyRate) / monthlyPayment) / 
      Math.log(1 + monthlyRate)
    )
  },
  
  /**
   * –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
   * @param {Object} debt –û–±—ä–µ–∫—Ç –¥–æ–ª–≥–∞
   * @param {number} increasedPayment –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
   * @returns {number}
   */
  calculateInterestSavings(debt, increasedPayment) {
    const timeWithMinimum = this.estimatePayoffTime(
      debt.current_balance, 
      debt.minimum_payment, 
      debt.interest_rate
    )
    
    const timeWithIncreased = this.estimatePayoffTime(
      debt.current_balance, 
      increasedPayment, 
      debt.interest_rate
    )
    
    if (timeWithMinimum === 999 || timeWithIncreased === 999) {
      return 0
    }
    
    const totalWithMinimum = debt.minimum_payment * timeWithMinimum
    const totalWithIncreased = increasedPayment * timeWithIncreased
    
    return Math.max(0, totalWithMinimum - totalWithIncreased - debt.current_balance)
  },
  
  /**
   * –†–∞—Å—á–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
   * @param {Array} debts –ú–∞—Å—Å–∏–≤ –¥–æ–ª–≥–æ–≤
   * @returns {number}
   */
  calculateMonthlyInterestCost(debts) {
    return debts.reduce((total, debt) => {
      const monthlyRate = debt.interest_rate / 100 / 12
      return total + (debt.current_balance * monthlyRate)
    }, 0)
  },
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Å—è—Ü
   * @param {number} year –ì–æ–¥
   * @param {number} month –ú–µ—Å—è—Ü (1-12)
   * @returns {Promise<Object>}
   */
  async getMonthlyStatistics(year, month) {
    try {
      const startDate = `${year}-${month.toString().padStart(2, '0')}-01`
      const endDate = `${year}-${month.toString().padStart(2, '0')}-31`
      
      const transactions = await this.getTransactionHistory(startDate, endDate)
      
      const income = transactions
        .filter(t => t.type === 'income')
        .reduce((sum, t) => sum + t.amount, 0)
      
      const payments = transactions
        .filter(t => t.type === 'payment')
        .reduce((sum, t) => sum + t.amount, 0)
      
      return {
        month,
        year,
        income,
        payments,
        netFlow: income - payments,
        transactionCount: transactions.length
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        month,
        year,
        income: 0,
        payments: 0,
        netFlow: 0,
        transactionCount: 0
      }
    }
  }
}

// ============================================
// üé® –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –ì–ê–õ–ï–†–ï–ï–ô
// ============================================

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º –≥–∞–ª–µ—Ä–µ–∏
 * –ü–æ–∑–≤–æ–ª—è—é—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–∞–ª–µ—Ä–µ–∏
 */
const galleryCompatibilityAPI = {
  async loadAllData() {
    return {
      arts: [],
      artists: [],
      tags: [],
      characters: [],
      stats: { arts: 0, artists: 0, tags: 0, characters: 0 }
    }
  },
  
  async getFurryArts() { return [] },
  async getFurryArtists() { return [] },
  async getFurryTags() { return [] },
  async getSpecies() { return [] }
}

// ============================================
// üì§ –§–ò–ù–ê–õ–¨–ù–´–ï –≠–ö–°–ü–û–†–¢–´ (–ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ô!)
// ============================================

// –û—Å–Ω–æ–≤–Ω—ã–µ API-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export const authApi = authenticationAPI
export const debtApi = debtManagementAPI

// –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–¢–û–õ–¨–ö–û –û–î–ò–ù –≠–ö–°–ü–û–†–¢!)
export const api = galleryCompatibilityAPI

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≥–∞–ª–µ—Ä–µ–µ–π
export { galleryCompatibilityAPI as furryApi }

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export default {
  supabase,
  authApi: authenticationAPI,
  debtApi: debtManagementAPI,
  furryApi: galleryCompatibilityAPI
}

// ============================================
// ‚úÖ –õ–û–ì–û –£–°–ü–ï–®–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò
// ============================================

console.log(`
ü¶ä ===================================
   FOX TAFFY DEBT MANAGER API
   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫!
===================================

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:
‚îú‚îÄ‚îÄ üîê authApi - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚îú‚îÄ‚îÄ üí∞ debtApi - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏  
‚îú‚îÄ‚îÄ üé® furryApi - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
‚îî‚îÄ‚îÄ üóÑÔ∏è supabase - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

üö´ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
`)