// ===============================================
// üé™ FOXTAFFY.FUN - –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô SUPABASE API
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –≥–∞–ª–µ—Ä–µ–µ–π
// ===============================================

import { createClient } from '@supabase/supabase-js'

// ===============================================
// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
// ===============================================

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('‚ùå Supabase environment variables are not set. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.')
}

console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase:', {
  url: supabaseUrl,
  hasKey: !!supabaseAnonKey,
  keyLength: supabaseAnonKey?.length,
  environment: import.meta.env.MODE
})

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'User-Agent': 'FoxTaffy.fun/2.0'
    }
  }
})

// ===============================================
// üé™ –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô API –ö–õ–ê–°–°
// ===============================================

export const furryApi = {

  // ============================================
  // üìÖ –ú–ï–¢–û–î–´ –î–õ–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô (CONS)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  async getEvents(options = {}) {
    const {
      status = 'all', // 'upcoming', 'completed', 'all', 'featured'
      event_type,
      attendance_status,
      city,
      search,
      featured = false,
      limit = 20,
      offset = 0,
      sort = 'date_desc' // 'date_desc', 'date_asc', 'name_asc', 'name_desc', 'rating_desc', 'created_desc'
    } = options

    try {
      console.log('üé™ getEvents: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      let query = supabase.from('cons').select('*')

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status === 'upcoming') {
        query = query.gt('event_date', new Date().toISOString().split('T')[0])
      } else if (status === 'completed') {
        query = query.lt('event_date', new Date().toISOString().split('T')[0])
      } else if (status === 'featured') {
        query = query.eq('is_featured', true)
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      if (event_type) {
        query = query.eq('event_type', event_type)
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É —É—á–∞—Å—Ç–∏—è
      if (attendance_status) {
        query = query.eq('attendance_status', attendance_status)
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
      if (city) {
        query = query.eq('city', city)
      }

      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      if (search) {
        query = query.or(`name.ilike.%${search}%,subtitle.ilike.%${search}%,description.ilike.%${search}%,location.ilike.%${search}%`)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortMapping = {
        'date_desc': { column: 'event_date', ascending: false },
        'date_asc': { column: 'event_date', ascending: true },
        'name_asc': { column: 'name', ascending: true },
        'name_desc': { column: 'name', ascending: false },
        'rating_desc': { column: 'my_rating', ascending: false },
        'rating_asc': { column: 'my_rating', ascending: true },
        'spent_desc': { column: 'total_spent', ascending: false },
        'spent_asc': { column: 'total_spent', ascending: true },
        'created_desc': { column: 'created_at', ascending: false }
      }

      const sortConfig = sortMapping[sort] || sortMapping['date_desc']
      query = query.order(sortConfig.column, { ascending: sortConfig.ascending, nullsLast: true })

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (limit) {
        query = query.limit(limit)
      }
      if (offset) {
        query = query.range(offset, offset + limit - 1)
      }

      const { data, error } = await query

      if (error) throw error

      console.log('‚úÖ getEvents: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data?.length || 0)
      return data || []

    } catch (error) {
      console.error('‚ùå getEvents: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ slug
   */
  async getEventBySlug(slug) {
    try {
      console.log('üîç getEventBySlug: –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ slug:', slug)

      const { data, error } = await supabase
        .from('cons')
        .select('*')
        .eq('slug', slug)
        .single()

      if (error) {
        if (error.code === 'PGRST116') {
          console.log('‚ö†Ô∏è getEventBySlug: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
          return null
        }
        throw error
      }

      console.log('‚úÖ getEventBySlug: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', data.name)
      return data

    } catch (error) {
      console.error('‚ùå getEventBySlug: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  async getEventsStats() {
    try {
      console.log('üìä getEventsStats: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...')
      
      const { data, error } = await supabase
        .from('cons')
        .select('id, event_date, my_rating, total_spent, attendees_count, is_featured')

      if (error) throw error

      const now = new Date()
      const todayISO = now.toISOString().split('T')[0]
      
      const upcoming = data.filter(e => e.event_date > todayISO)
      const completed = data.filter(e => e.event_date <= todayISO)
      const featured = data.filter(e => e.is_featured)

      const stats = {
        total: data.length,
        upcoming: upcoming.length,
        completed: completed.length,
        featured: featured.length,
        totalSpent: data.reduce((sum, e) => sum + (e.total_spent || 0), 0),
        averageRating: data.filter(e => e.my_rating).length > 0 
          ? data.reduce((sum, e) => sum + (e.my_rating || 0), 0) / data.filter(e => e.my_rating).length 
          : 0,
        totalAttendees: data.reduce((sum, e) => sum + (e.attendees_count || 0), 0)
      }

      console.log('‚úÖ getEventsStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats)
      return stats

    } catch (error) {
      console.error('‚ùå getEventsStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        total: 0, upcoming: 0, completed: 0, featured: 0,
        totalSpent: 0, averageRating: 0, totalAttendees: 0
      }
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async createEvent(eventData) {
    try {
      console.log('‚ûï createEvent: –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventData.name)
      
      const cleanData = this._cleanEventData(eventData)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
      if (cleanData.slug) {
        const slugExists = await this.checkEventSlugExists(cleanData.slug)
        if (slugExists) {
          cleanData.slug = `${cleanData.slug}-${Date.now()}`
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      cleanData.created_at = new Date().toISOString()
      cleanData.updated_at = new Date().toISOString()
      
      const { data, error } = await supabase
        .from('cons')
        .insert(cleanData)
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ createEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå createEvent: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async updateEvent(eventId, updateData) {
    try {
      console.log('üìù updateEvent: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      const cleanData = this._cleanEventData(updateData)
      cleanData.updated_at = new Date().toISOString()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (cleanData.slug) {
        const existingEvent = await this.getEventById(eventId)
        if (existingEvent && existingEvent.slug !== cleanData.slug) {
          const slugExists = await this.checkEventSlugExists(cleanData.slug)
          if (slugExists) {
            cleanData.slug = `${cleanData.slug}-${Date.now()}`
          }
        }
      }
      
      const { data, error } = await supabase
        .from('cons')
        .update(cleanData)
        .eq('id', eventId)
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ updateEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå updateEvent: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async deleteEvent(eventId) {
    try {
      console.log('üóëÔ∏è deleteEvent: –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await Promise.all([
        supabase.from('con_links').delete().eq('con_id', eventId),
        supabase.from('con_features').delete().eq('con_id', eventId),
        supabase.from('con_photos').delete().eq('con_id', eventId),
        supabase.from('con_purchases').delete().eq('con_id', eventId)
      ])
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const { error } = await supabase
        .from('cons')
        .delete()
        .eq('id', eventId)
      
      if (error) throw error
      
      console.log('‚úÖ deleteEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
      return true
      
    } catch (error) {
      console.error('‚ùå deleteEvent: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
   */
  async getEventById(eventId) {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('*')
        .eq('id', eventId)
        .single()
      
      if (error) {
        if (error.code === 'PGRST116') return null // Not found
        throw error
      }
      
      return data
      
    } catch (error) {
      console.error('‚ùå getEventById: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ slug
   */
  async checkEventSlugExists(slug) {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('id')
        .eq('slug', slug)
        .maybeSingle()

      if (error) throw error
      return !!data
      
    } catch (error) {
      console.error('‚ùå checkEventSlugExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ slug:', error)
      return false
    }
  },

  // ============================================
  // üé® –ú–ï–¢–û–î–´ –î–õ–Ø –ì–ê–õ–ï–†–ï–ò –ò–°–ö–£–°–°–¢–í–ê
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
   */
  async getFurryArts(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showYiff = false,
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üé® getFurryArts: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      let query = supabase
        .from('arts')
        .select(`
          id, title, image_url, thumbnail_url, is_nsfw, upload_date,
          art_collaborators!inner(persons!inner(nickname, avatar_url, is_friend))
        `)
        .eq('is_deleted', false)
        .eq('art_collaborators.role', 'main_artist')

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (search.trim()) {
        query = query.ilike('title', `%${search}%`)
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º
      if (artists.length > 0) {
        query = query.in('art_collaborators.persons.nickname', artists)
      }

      // NSFW —Ñ–∏–ª—å—Ç—Ä
      if (!showNsfw) {
        query = query.eq('is_nsfw', false)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortMapping = {
        'newest': { column: 'upload_date', ascending: false },
        'oldest': { column: 'upload_date', ascending: true },
        'title_asc': { column: 'title', ascending: true },
        'title_desc': { column: 'title', ascending: false }
      }

      const sortConfig = sortMapping[sort] || sortMapping['newest']
      query = query.order(sortConfig.column, { ascending: sortConfig.ascending })

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (limit) {
        query = query.limit(limit)
      }
      if (offset) {
        query = query.range(offset, offset + limit - 1)
      }

      const { data, error } = await query

      if (error) throw error

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const processedArts = (data || []).map(art => {
        const mainArtist = art.art_collaborators?.[0]?.persons
        
        return {
          id: art.id,
          title: art.title,
          image_url: art.image_url,
          thumbnail_url: art.thumbnail_url || art.image_url,
          is_nsfw: art.is_nsfw || false,
          created_date: art.upload_date,
          upload_date: art.upload_date,
          artist_name: mainArtist?.nickname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          artist_avatar: mainArtist?.avatar_url,
          artist_is_friend: mainArtist?.is_friend || false,
          characters: [],
          tags: [],
          tagNames: []
        }
      })

      console.log('‚úÖ getFurryArts: –ê—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', processedArts.length)
      return processedArts
      
    } catch (error) {
      console.error('‚ùå getFurryArts: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–æ–≤:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ç
   */
  async addFurryArt(artData) {
    try {
      console.log('‚ûï addFurryArt: –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç:', artData.title)
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      let artistId = null
      const { data: existingArtist, error: artistError } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', artData.artist_nickname)
        .maybeSingle()
      
      if (artistError) throw artistError
      
      if (existingArtist) {
        artistId = existingArtist.id
      } else {
        const { data: newArtist, error: createError } = await supabase
          .from('persons')
          .insert([{
            nickname: artData.artist_nickname,
            avatar_url: null,
            is_friend: false
          }])
          .select('id')
          .single()
          
        if (createError) throw createError
        artistId = newArtist.id
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç
      const { data: artResult, error: artError } = await supabase
        .from('arts')
        .insert([{
          title: artData.title,
          image_url: artData.image_url,
          thumbnail_url: artData.thumbnail_url || artData.image_url,
          is_nsfw: artData.is_nsfw || false,
          upload_date: new Date().toISOString()
        }])
        .select()
        .single()
      
      if (artError) throw artError
      
      // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º
      const { error: collabError } = await supabase
        .from('art_collaborators')
        .insert([{
          art_id: artResult.id,
          person_id: artistId,
          role: 'main_artist'
        }])
      
      if (collabError) throw collabError
      
      console.log('‚úÖ addFurryArt: –ê—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', artResult.title)
      return artResult
      
    } catch (error) {
      console.error('‚ùå addFurryArt: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –∫ –∞—Ä—Ç—É
   */
  async addArtTags(artId, tagNames) {
    try {
      console.log('üè∑Ô∏è addArtTags: –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∫ –∞—Ä—Ç—É:', artId, tagNames)
      
      for (const tagName of tagNames) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–≥
        let tagId = null
        const { data: existingTag, error: tagError } = await supabase
          .from('tags')
          .select('id')
          .eq('name', tagName)
          .maybeSingle()
        
        if (tagError) throw tagError
        
        if (existingTag) {
          tagId = existingTag.id
        } else {
          const { data: newTag, error: createError } = await supabase
            .from('tags')
            .insert([{ name: tagName }])
            .select('id')
            .single()
            
          if (createError) throw createError
          tagId = newTag.id
        }
        
        // –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–≥ —Å –∞—Ä—Ç–æ–º
        const { error: linkError } = await supabase
          .from('art_tags')
          .insert([{
            art_id: artId,
            tag_id: tagId
          }])
        
        if (linkError && linkError.code !== '23505') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
          throw linkError
        }
      }
      
      console.log('‚úÖ addArtTags: –¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return true
      
    } catch (error) {
      console.error('‚ùå addArtTags: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      throw error
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫ –∞—Ä—Ç—É
   */
  async addArtCharacters(artId, characterNames) {
    try {
      console.log('ü¶ä addArtCharacters: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫ –∞—Ä—Ç—É:', artId, characterNames)
      
      for (const characterName of characterNames) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        let characterId = null
        const { data: existingCharacter, error: charError } = await supabase
          .from('fursonas')
          .select('id')
          .eq('name', characterName)
          .maybeSingle()
        
        if (charError) throw charError
        
        if (existingCharacter) {
          characterId = existingCharacter.id
        } else {
          const { data: newCharacter, error: createError } = await supabase
            .from('fursonas')
            .insert([{ name: characterName }])
            .select('id')
            .single()
            
          if (createError) throw createError
          characterId = newCharacter.id
        }
        
        // –°–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∞—Ä—Ç–æ–º
        const { error: linkError } = await supabase
          .from('art_fursonas')
          .insert([{
            art_id: artId,
            fursona_id: characterId
          }])
        
        if (linkError && linkError.code !== '23505') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
          throw linkError
        }
      }
      
      console.log('‚úÖ addArtCharacters: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return true
      
    } catch (error) {
      console.error('‚ùå addArtCharacters: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      throw error
    }
  },

  // ============================================
  // üë®‚Äçüé® –ú–ï–¢–û–î–´ –î–õ–Ø –•–£–î–û–ñ–ù–ò–ö–û–í
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∞—Ä—Ç–æ–≤
   */
  async getFurryArtists() {
    try {
      console.log('üë®‚Äçüé® getFurryArtists: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∞—Ä—Ç–æ–≤...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
      const { data: artists, error: artistsError } = await supabase
        .from('persons')
        .select('*')
        .order('nickname', { ascending: true })

      if (artistsError) throw artistsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∞—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const { data: artCounts, error: countsError } = await supabase
        .from('art_collaborators')
        .select(`
          person_id,
          arts!inner(id)
        `)
        .eq('role', 'main_artist')
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –∞—Ä—Ç–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const artistsWithCounts = (artists || []).map(artist => {
        const artCount = countsError ? 0 : (artCounts || []).filter(count => 
          count.person_id === artist.id
        ).length
        
        return {
          id: artist.id,
          name: artist.nickname,
          nickname: artist.nickname,
          avatar_url: artist.avatar_url,
          is_friend: artist.is_friend || false,
          created_at: artist.created_at,
          count: artCount,
          artCount: artCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä—Ç–æ–≤
      const sortedArtists = artistsWithCounts.sort((a, b) => (b.artCount || 0) - (a.artCount || 0))
      
      console.log('‚úÖ getFurryArtists: –•—É–¥–æ–∂–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedArtists.length)
      return sortedArtists
      
    } catch (error) {
      console.error('‚ùå getFurryArtists: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
   */
  async createArtist(artistData) {
    try {
      console.log('‚ûï createArtist: –°–æ–∑–¥–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', artistData.nickname)
      
      const existingArtist = await this.checkArtistExists(artistData.nickname)
      if (existingArtist) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('persons')
        .insert([{
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url || null,
          is_friend: artistData.is_friend || false
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createArtist: –•—É–¥–æ–∂–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createArtist: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
   */
  async checkArtistExists(nickname) {
    try {
      const { data, error } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', nickname.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkArtistExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      return false
    }
  },

  // ============================================
  // üè∑Ô∏è –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–ì–û–í
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
   */
  async getFurryTags() {
    try {
      console.log('üè∑Ô∏è getFurryTags: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
      const { data: tags, error: tagsError } = await supabase
        .from('tags')
        .select('id, name, created_at')
        .order('name', { ascending: true })

      if (tagsError) throw tagsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–µ–≥–æ–≤
      const { data: tagCounts, error: countsError } = await supabase
        .from('art_tags')
        .select(`
          tag_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã —Ç–µ–≥–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
      const tagsWithCounts = (tags || []).map(tag => {
        const useCount = countsError ? 0 : (tagCounts || []).filter(count => 
          count.tag_id === tag.id
        ).length
        
        return {
          id: tag.id,
          name: tag.name,
          created_at: tag.created_at,
          count: useCount,
          useCount: useCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
      const sortedTags = tagsWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getFurryTags: –¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedTags.length)
      return sortedTags
      
    } catch (error) {
      console.error('‚ùå getFurryTags: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥
   */
  async createTag(tagData) {
    try {
      console.log('‚ûï createTag: –°–æ–∑–¥–∞–µ–º —Ç–µ–≥:', tagData.name)
      
      const existingTag = await this.checkTagExists(tagData.name)
      if (existingTag) {
        throw new Error('–¢–µ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('tags')
        .insert([{
          name: tagData.name.trim()
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createTag: –¢–µ–≥ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createTag: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
   */
  async checkTagExists(tagName) {
    try {
      const { data, error } = await supabase
        .from('tags')
        .select('id')
        .eq('name', tagName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkTagExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞:', error)
      return false
    }
  },

  // ============================================
  // ü¶ä –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–π
   */
  async getSpecies() {
    try {
      console.log('ü¶ä getSpecies: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characters, error: charactersError } = await supabase
        .from('fursonas')
        .select('*')
        .order('name', { ascending: true })

      if (charactersError) throw charactersError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characterCounts, error: countsError } = await supabase
        .from('art_fursonas')
        .select(`
          fursona_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const charactersWithCounts = (characters || []).map(character => {
        const useCount = countsError ? 0 : (characterCounts || []).filter(count => 
          count.fursona_id === character.id
        ).length
        
        return {
          id: character.id,
          name: character.name,
          avatar_url: character.avatar_url,
          created_at: character.created_at,
          count: useCount,
          useCount: useCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π
      const sortedCharacters = charactersWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getSpecies: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedCharacters.length)
      return sortedCharacters
      
    } catch (error) {
      console.error('‚ùå getSpecies: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async createCharacter(characterData) {
    try {
      console.log('‚ûï createCharacter: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', characterData.name)
      
      const existingCharacter = await this.checkCharacterExists(characterData.name)
      if (existingCharacter) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('fursonas')
        .insert([{
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url || null
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createCharacter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async checkCharacterExists(name) {
    try {
      const { data, error } = await supabase
        .from('fursonas')
        .select('id')
        .eq('name', name.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkCharacterExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      return false
    }
  },

  // ============================================
  // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async getDashboardStats() {
    try {
      console.log('üìä getDashboardStats: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
      
      const [artsResult, artistsResult, tagsResult, charactersResult] = await Promise.all([
        this.getFurryArts({ limit: 1000, showNsfw: true }),
        this.getFurryArtists(),
        this.getFurryTags(),
        this.getSpecies()
      ])
      
      const stats = {
        arts: artsResult.length,
        artists: artistsResult.length,
        tags: tagsResult.length,
        characters: charactersResult.length,
        nsfwArts: artsResult.filter(art => art.is_nsfw).length,
        sfwArts: artsResult.filter(art => !art.is_nsfw).length,
        friendArtists: artistsResult.filter(artist => artist.is_friend).length,
        s3Files: artsResult.filter(art => this.isS3Url(art.image_url)).length,
        recentUploads: artsResult.filter(art => {
          const uploadDate = new Date(art.upload_date)
          const weekAgo = new Date()
          weekAgo.setDate(weekAgo.getDate() - 7)
          return uploadDate > weekAgo
        }).length,
        topArtist: artistsResult.length > 0 ? artistsResult[0] : null,
        topTag: tagsResult.length > 0 ? tagsResult[0] : null,
        topCharacter: charactersResult.length > 0 ? charactersResult[0] : null
      }
      
      console.log('‚úÖ getDashboardStats: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå getDashboardStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        artists: 0, tags: 0, characters: 0, arts: 0,
        nsfwArts: 0, sfwArts: 0, friendArtists: 0, s3Files: 0,
        recentUploads: 0, topArtist: null, topTag: null, topCharacter: null
      }
    }
  },

  // ============================================
  // üßπ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   */
  _cleanEventData(data) {
    const cleaned = { ...data }
    
    // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    delete cleaned.id
    delete cleaned.created_at
    delete cleaned.updated_at
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const numericFields = [
      'my_rating', 'total_spent', 'attendees_count', 
      'expected_visitors', 'entrance_fee'
    ]
    
    numericFields.forEach(field => {
      if (cleaned[field] !== null && cleaned[field] !== undefined) {
        const num = Number(cleaned[field])
        cleaned[field] = isNaN(num) ? null : num
      }
    })
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–ª–µ–≤—ã –ø–æ–ª—è
    const booleanFields = [
      'is_featured', 'has_dealers_den', 
      'has_art_show', 'has_fursuit_parade'
    ]
    
    booleanFields.forEach(field => {
      if (cleaned[field] !== null && cleaned[field] !== undefined) {
        cleaned[field] = Boolean(cleaned[field])
      }
    })
    
    // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    const stringFields = [
      'name', 'slug', 'subtitle', 'description', 'location', 
      'city', 'country', 'official_website', 'meta_image', 
      'meta_title', 'meta_description'
    ]
    
    stringFields.forEach(field => {
      if (typeof cleaned[field] === 'string') {
        cleaned[field] = cleaned[field].trim() || null
      }
    })
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    const dateFields = ['event_date', 'announced_date']
    
    dateFields.forEach(field => {
      if (cleaned[field]) {
        const date = new Date(cleaned[field])
        if (isNaN(date.getTime())) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –ø–æ–ª–µ ${field}`)
        }
        cleaned[field] = date.toISOString().split('T')[0] // –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
      }
    })
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!cleaned.name || cleaned.name.length < 3) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
    }
    
    if (!cleaned.event_date) {
      throw new Error('–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!cleaned.slug && cleaned.name) {
      cleaned.slug = this._generateSlugFromName(cleaned.name)
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è meta_title –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!cleaned.meta_title && cleaned.name) {
      cleaned.meta_title = cleaned.name
      if (cleaned.subtitle) {
        cleaned.meta_title += ` - ${cleaned.subtitle}`
      }
    }
    
    return cleaned
  },

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
   */
  _generateSlugFromName(name) {
    return name
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim('-')
      .substring(0, 50)
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π –Ω–∞ S3/Supabase Storage
   */
  isS3Url(url) {
    if (!url) return false
    return url.includes('supabase.co/storage') || url.includes('gallery/')
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
   */
  async getTableInfo() {
    try {
      const tables = []
      
      const tablesData = await Promise.allSettled([
        supabase.from('cons').select('count', { count: 'exact', head: true }),
        supabase.from('con_links').select('count', { count: 'exact', head: true }),
        supabase.from('con_features').select('count', { count: 'exact', head: true }),
        supabase.from('con_photos').select('count', { count: 'exact', head: true }),
        supabase.from('con_purchases').select('count', { count: 'exact', head: true }),
        supabase.from('arts').select('count', { count: 'exact', head: true }),
        supabase.from('persons').select('count', { count: 'exact', head: true }),
        supabase.from('tags').select('count', { count: 'exact', head: true }),
        supabase.from('fursonas').select('count', { count: 'exact', head: true })
      ])
      
      const tableNames = [
        'cons', 'con_links', 'con_features', 'con_photos', 'con_purchases',
        'arts', 'persons', 'tags', 'fursonas'
      ]
      
      tablesData.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          tables.push({
            name: tableNames[index],
            count: result.value.count || 0,
            status: 'ok'
          })
        } else {
          tables.push({
            name: tableNames[index],
            count: 0,
            status: 'error',
            error: result.reason?.message
          })
        }
      })
      
      return tables
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:', error)
      return []
    }
  }
}

// ===============================================
// üöÄ –≠–ö–°–ü–û–†–¢ API
// ===============================================

export default furryApi

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { furryApi as eventApi, furryApi as consApi, furryApi as api }

console.log('üé™ FoxTaffy Unified API initialized successfully!')
console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≥–∞–ª–µ—Ä–µ—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω–æ–º API!')
console.log('üîí –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω—ã!')
console.log('üìä –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
console.log('üéØ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')