// ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API FOX TAFFY - –ü–û–î –†–ï–ê–õ–¨–ù–£–Æ –°–•–ï–ú–£ –ë–î
import { createClient } from '@supabase/supabase-js'

// ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥!)
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
if (!supabaseUrl || !supabaseKey) {
  throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.')
}

// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase:', {
  url: supabaseUrl,
  hasKey: !!supabaseKey,
  keyLength: supabaseKey?.length,
  environment: import.meta.env.MODE
})

// ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Supabase —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'User-Agent': 'FoxTaffy.fun/2.0'
    }
  }
})

// ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –ü–û–î –†–ï–ê–õ–¨–ù–£–Æ –°–•–ï–ú–£ –ë–î
export const furryApi = {
  async getEvents(options = {}) {
    const {
      status = 'all', // 'upcoming', 'completed', 'all'
      featured = false,
      limit = 20,
      offset = 0,
      sort = 'date_desc' // 'date_desc', 'date_asc', 'name', 'rating'
    } = options

    try {
      console.log('üé™ getEvents: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ cons —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      let query = supabase
        .from('cons_full_view')
        .select('*')

      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status !== 'all') {
        if (status === 'upcoming') {
          query = query.gt('event_date', new Date().toISOString())
        } else if (status === 'completed') {
          query = query.lt('event_date', new Date().toISOString())
        }
      }

      // –§–∏–ª—å—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
      if (featured) {
        query = query.eq('is_featured', true)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (sort) {
        case 'date_desc':
          query = query.order('event_date', { ascending: false })
          break
        case 'date_asc':
          query = query.order('event_date', { ascending: true })
          break
        case 'name':
          query = query.order('name', { ascending: true })
          break
        case 'rating':
          query = query.order('my_rating', { ascending: false, nullsLast: true })
          break
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (limit > 0) {
        query = query.range(offset, offset + limit - 1)
      }

      const { data, error } = await query

      if (error) throw error

      console.log(`‚úÖ getEvents: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ cons`)
      return data || []

    } catch (error) {
      console.error('‚ùå getEvents: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      
      // Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cons –µ—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      try {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cons...')
        let fallbackQuery = supabase
          .from('cons')
          .select('*')

        if (status === 'upcoming') {
          fallbackQuery = fallbackQuery.gt('event_date', new Date().toISOString())
        } else if (status === 'completed') {
          fallbackQuery = fallbackQuery.lt('event_date', new Date().toISOString())
        }

        if (featured) {
          fallbackQuery = fallbackQuery.eq('is_featured', true)
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        switch (sort) {
          case 'date_desc':
            fallbackQuery = fallbackQuery.order('event_date', { ascending: false })
            break
          case 'date_asc':
            fallbackQuery = fallbackQuery.order('event_date', { ascending: true })
            break
          case 'name':
            fallbackQuery = fallbackQuery.order('name', { ascending: true })
            break
        }

        if (limit > 0) {
          fallbackQuery = fallbackQuery.range(offset, offset + limit - 1)
        }

        const { data: fallbackData, error: fallbackError } = await fallbackQuery
        
        if (fallbackError) throw fallbackError
        
        console.log(`‚úÖ getEvents (fallback): –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fallbackData?.length || 0} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`)
        return fallbackData || []
        
      } catch (fallbackError) {
        console.error('‚ùå getEvents (fallback): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', fallbackError)
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${fallbackError.message}`)
      }
    }
  },

  async getEventBySlug(slug) {
    try {
      console.log('üé™ getEventBySlug: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ cons:', slug)
      
      // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      let { data: event, error: eventError } = await supabase
        .from('cons_full_view')
        .select('*')
        .eq('slug', slug)
        .single()

      // –ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      if (eventError) {
        console.log('üîÑ Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cons...')
        const { data: fallbackEvent, error: fallbackError } = await supabase
          .from('cons')
          .select('*')
          .eq('slug', slug)
          .single()
          
        if (fallbackError) throw fallbackError
        event = fallbackEvent
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const [linksData, featuresData, photosData, purchasesData] = await Promise.all([
        supabase.from('con_links').select('*').eq('con_id', event.id).order('display_order'),
        supabase.from('con_features').select('*').eq('con_id', event.id).order('display_order'),
        supabase.from('con_photos').select('*').eq('con_id', event.id).order('display_order'),
        supabase.from('con_purchases').select('*').eq('con_id', event.id).order('purchased_at', { ascending: false })
      ])

      const fullEvent = {
        ...event,
        links: linksData.data || [],
        features: featuresData.data || [],
        photos: photosData.data || [],
        purchases: purchasesData.data || []
      }

      console.log('‚úÖ getEventBySlug: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
      return fullEvent

    } catch (error) {
      console.error('‚ùå getEventBySlug: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${error.message}`)
    }
  },

  async createEvent(eventData) {
    try {
      console.log('‚ûï createEvent: –°–æ–∑–¥–∞—ë–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ cons:', eventData.name)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
      if (!eventData.slug) {
        eventData.slug = eventData.name
          .toLowerCase()
          .replace(/[^–∞-—è—ë\w\s-]/gi, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim()
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
      const existingEvent = await this.checkEventSlugExists(eventData.slug)
      if (existingEvent) {
        eventData.slug = `${eventData.slug}-${Date.now()}`
      }

      const { data, error } = await supabase
        .from('cons')
        .insert([{
          name: eventData.name.trim(),
          slug: eventData.slug,
          description: eventData.description?.trim(),
          short_description: eventData.short_description?.trim(),
          event_date: eventData.event_date,
          announced_date: eventData.announced_date,
          location: eventData.location?.trim(),
          city: eventData.city?.trim(),
          country: eventData.country || '–†–æ—Å—Å–∏—è',
          banner_url: eventData.banner_url?.trim(),
          logo_url: eventData.logo_url?.trim(),
          status: eventData.status || 'upcoming',
          event_type: eventData.event_type || 'convention',
          attendance_status: eventData.attendance_status || 'planning',
          attendees_count: eventData.attendees_count,
          my_rating: eventData.my_rating,
          is_featured: eventData.is_featured || false,
          has_fursuit_friendly: eventData.has_fursuit_friendly !== false,
          has_dealers_den: eventData.has_dealers_den || false,
          has_art_show: eventData.has_art_show || false
        }])
        .select()
        .single()

      if (error) throw error

      console.log('‚úÖ createEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ cons:', data)
      return data

    } catch (error) {
      console.error('‚ùå createEvent: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  async updateEvent(eventId, eventData) {
    try {
      console.log('üîÑ updateEvent: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ cons:', eventId)
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–ª—è—Ç—å
      const { id, created_at, ...updateData } = eventData
      updateData.updated_at = new Date().toISOString()

      const { data, error } = await supabase
        .from('cons')
        .update(updateData)
        .eq('id', eventId)
        .select()
        .single()

      if (error) throw error

      console.log('‚úÖ updateEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ cons')
      return data

    } catch (error) {
      console.error('‚ùå updateEvent: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  async deleteEvent(eventId) {
    try {
      console.log('üóëÔ∏è deleteEvent: –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ cons:', eventId)
      
      const { error } = await supabase
        .from('cons')
        .delete()
        .eq('id', eventId)

      if (error) throw error

      console.log('‚úÖ deleteEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ cons')
      return true

    } catch (error) {
      console.error('‚ùå deleteEvent: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  async checkEventSlugExists(slug) {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('id')
        .eq('slug', slug)
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkEventSlugExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ slug:', error)
      return false
    }
  },

  // ============================================
  // üîó –ú–ï–¢–û–î–´ –î–õ–Ø –°–°–´–õ–û–ö –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  async addEventLink(eventId, linkData) {
    try {
      const { data, error } = await supabase
        .from('con_links')
        .insert([{
          con_id: eventId,
          link_type: linkData.link_type,
          title: linkData.title.trim(),
          url: linkData.url.trim(),
          icon_class: linkData.icon_class,
          display_order: linkData.display_order || 1
        }])
        .select()
        .single()

      if (error) throw error
      return data
    } catch (error) {
      console.error('‚ùå addEventLink: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw error
    }
  },

  async removeEventLink(linkId) {
    try {
      const { error } = await supabase
        .from('con_links')
        .delete()
        .eq('id', linkId)

      if (error) throw error
      return true
    } catch (error) {
      console.error('‚ùå removeEventLink: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw error
    }
  },

  // ============================================
  // ‚ú® –ú–ï–¢–û–î–´ –î–õ–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  async addEventFeature(eventId, featureData) {
    try {
      const { data, error } = await supabase
        .from('con_features')
        .insert([{
          con_id: eventId,
          feature_type: featureData.feature_type,
          title: featureData.title.trim(),
          description: featureData.description?.trim(),
          icon_class: featureData.icon_class,
          display_order: featureData.display_order || 1
        }])
        .select()
        .single()

      if (error) throw error
      return data
    } catch (error) {
      console.error('‚ùå addEventFeature: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', error)
      throw error
    }
  },

  // ============================================
  // üì∏ –ú–ï–¢–û–î–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ô –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  async addEventPhoto(eventId, photoData) {
    try {
      const { data, error } = await supabase
        .from('con_photos')
        .insert([{
          con_id: eventId,
          image_url: photoData.image_url.trim(),
          thumbnail_url: photoData.thumbnail_url?.trim(),
          caption: photoData.caption?.trim(),
          photo_type: photoData.photo_type || 'general',
          is_featured: photoData.is_featured || false,
          taken_at: photoData.taken_at,
          display_order: photoData.display_order || 1
        }])
        .select()
        .single()

      if (error) throw error
      return data
    } catch (error) {
      console.error('‚ùå addEventPhoto: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ:', error)
      throw error
    }
  },

  // ============================================
  // üõí –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ö–£–ü–û–ö –ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–•
  // ============================================

  async addEventPurchase(eventId, purchaseData) {
    try {
      const { data, error } = await supabase
        .from('con_purchases')
        .insert([{
          con_id: eventId,
          item_name: purchaseData.item_name.trim(),
          description: purchaseData.description?.trim(),
          price: purchaseData.price,
          currency: purchaseData.currency || 'RUB',
          vendor_name: purchaseData.vendor_name?.trim(),
          category: purchaseData.category,
          image_url: purchaseData.image_url?.trim(),
          purchased_at: purchaseData.purchased_at || new Date().toISOString()
        }])
        .select()
        .single()

      if (error) throw error

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      await this.updateEventCounters(eventId)
      
      return data
    } catch (error) {
      console.error('‚ùå addEventPurchase: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw error
    }
  },

  async updateEventCounters(eventId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫
      const { data: purchaseStats, error } = await supabase
        .from('con_purchases')
        .select('price')
        .eq('con_id', eventId)

      if (error) throw error

      const totalSpent = purchaseStats.reduce((sum, p) => sum + (p.price || 0), 0)
      const purchasesCount = purchaseStats.length

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
      await supabase
        .from('cons')
        .update({
          total_spent: totalSpent,
          purchases_count: purchasesCount
        })
        .eq('id', eventId)

    } catch (error) {
      console.error('‚ùå updateEventCounters: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:', error)
    }
  },

  // ============================================
  // üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  async getEventsStats() {
    try {
      console.log('üìä getEventsStats: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ cons...')
      
      const { data, error } = await supabase
        .from('cons')
        .select(`
          id,
          status,
          event_type,
          my_rating,
          total_spent,
          attendees_count,
          event_date
        `)

      if (error) throw error

      const now = new Date()
      const upcoming = data.filter(e => new Date(e.event_date) > now)
      const completed = data.filter(e => new Date(e.event_date) <= now)

      const stats = {
        total: data.length,
        upcoming: upcoming.length,
        completed: completed.length,
        totalSpent: data.reduce((sum, e) => sum + (e.total_spent || 0), 0),
        averageRating: data.filter(e => e.my_rating).length > 0 ? 
          (data.filter(e => e.my_rating).reduce((sum, e) => sum + e.my_rating, 0) / 
           data.filter(e => e.my_rating).length).toFixed(1) : 0,
        byType: {}
      }

      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
      data.forEach(event => {
        const type = event.event_type || 'convention'
        stats.byType[type] = (stats.byType[type] || 0) + 1
      })

      console.log('‚úÖ getEventsStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ cons:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå getEventsStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return { 
        total: 0, 
        upcoming: 0, 
        completed: 0, 
        totalSpent: 0, 
        averageRating: 0, 
        byType: {} 
      }
    }
  },

  // ============================================
  // üîç –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  async searchEvents(searchQuery, options = {}) {
    try {
      console.log('üîç searchEvents: –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ cons:', searchQuery)
      
      const { limit = 20, status = 'all' } = options
      
      let query = supabase
        .from('cons')
        .select('*')
        .or(`name.ilike.%${searchQuery}%,location.ilike.%${searchQuery}%,city.ilike.%${searchQuery}%,description.ilike.%${searchQuery}%`)

      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status !== 'all') {
        if (status === 'upcoming') {
          query = query.gt('event_date', new Date().toISOString())
        } else if (status === 'completed') {
          query = query.lt('event_date', new Date().toISOString())
        }
      }

      query = query.order('event_date', { ascending: false }).limit(limit)

      const { data, error } = await query

      if (error) throw error

      console.log(`‚úÖ searchEvents: –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ cons`)
      return data || []

    } catch (error) {
      console.error('‚ùå searchEvents: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`)
    }
  },
  
  // ============================================
  // ‚úÖ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - loadAllData
  // ============================================
  async loadAllData(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîÑ loadAllData: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏...')
      console.log('üìã –û–ø—Ü–∏–∏:', options)
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      const [artsResult, artistsResult, tagsResult, charactersResult] = await Promise.all([
        this.getFurryArts(options),
        this.getFurryArtists(), // –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        this.getFurryTags(),     // –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        this.getSpecies()        // –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
      ])
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const stats = {
        arts: artsResult.length,
        artists: artistsResult.length,
        tags: tagsResult.length,
        characters: charactersResult.length,
        nsfwArts: artsResult.filter(art => art.is_nsfw).length,
        sfwArts: artsResult.filter(art => !art.is_nsfw).length,
        friendArtists: artistsResult.filter(artist => artist.is_friend).length,
        s3Files: artsResult.filter(art => this.isS3Url(art.image_url)).length
      }
      
      console.log('‚úÖ loadAllData: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏!')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`)
      console.log(`  - –ê—Ä—Ç–æ–≤: ${artsResult.length}`)
      console.log(`  - –•—É–¥–æ–∂–Ω–∏–∫–æ–≤: ${artistsResult.length} (—Ç–æ–ø: ${artistsResult[0]?.name} - ${artistsResult[0]?.artCount || 0} –∞—Ä—Ç–æ–≤)`)
      console.log(`  - –¢–µ–≥–æ–≤: ${tagsResult.length} (—Ç–æ–ø: ${tagsResult[0]?.name} - ${tagsResult[0]?.useCount || 0} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)`)
      console.log(`  - –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${charactersResult.length} (—Ç–æ–ø: ${charactersResult[0]?.name} - ${charactersResult[0]?.useCount || 0} –ø–æ—è–≤–ª–µ–Ω–∏–π)`)
      
      return {
        arts: artsResult,
        artists: artistsResult,
        tags: tagsResult,
        characters: charactersResult,
        stats: stats
      }
      
    } catch (error) {
      console.error('‚ùå loadAllData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
    }
  },
  
  // ============================================
  // ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ê–†–¢–û–í
  // ============================================
  async getFurryArts(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showYiff = false,
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîç getFurryArts: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gallery_view, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
      let query = supabase
        .from('gallery_view')
        .select('*')

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (search.trim()) {
        query = query.ilike('title', `%${search}%`)
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º
      if (artists.length > 0) {
        query = query.in('artist_name', artists)
      }

      // ‚úÖ NSFW —Ñ–∏–ª—å—Ç—Ä (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
      const hideNsfw = !showYiff && !showNsfw
      if (hideNsfw) {
        query = query.eq('is_nsfw', false)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (sort) {
        case 'newest':
          query = query.order('upload_date', { ascending: false })
          break
        case 'oldest':
          query = query.order('upload_date', { ascending: true })
          break
        case 'alphabetical':
          query = query.order('title', { ascending: true })
          break
        case 'alphabetical-desc':
          query = query.order('title', { ascending: false })
          break
        case 'artist':
          query = query.order('artist_name', { ascending: true })
          break
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (offset > 0) {
        query = query.range(offset, offset + limit - 1)
      } else {
        query = query.limit(limit)
      }

      const { data, error } = await query

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gallery_view:', error)
        if (error.message.includes('does not exist') || error.code === '42P01') {
          console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ gallery_view –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å')
          return await this.getFurryArtsDirectQuery(options)
        }
        throw error
      }

      console.log(`‚úÖ getFurryArts: –ü–æ–ª—É—á–µ–Ω–æ –∞—Ä—Ç–æ–≤ –∏–∑ gallery_view: ${data?.length || 0}`)

      // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      let processedArts = (data || []).map(art => ({
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        id: art.id,
        title: art.title,
        image_url: art.image_url,
        thumbnail_url: art.thumbnail_url || art.image_url,
        is_nsfw: art.is_nsfw || false,
        created_date: art.upload_date,
        created_at: art.upload_date,
        upload_date: art.upload_date,
        
        // –•—É–¥–æ–∂–Ω–∏–∫
        artist_name: art.artist_name,
        artist_avatar: art.artist_avatar,
        artist_is_friend: art.artist_is_friend,
        
        // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        characters: Array.isArray(art.characters) ? art.characters : [],
        depicted_fursona_names: Array.isArray(art.characters) ? 
          art.characters.map(c => c.name) : [],
        depicted_fursona_avatars: Array.isArray(art.characters) ? 
          art.characters.map(c => c.avatar) : [],
        
        // –¢–µ–≥–∏
        tags: Array.isArray(art.tags) ? art.tags.map(t => t.name) : [],
        tagNames: Array.isArray(art.tags) ? art.tags.map(t => t.name) : []
      }))

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º (–ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON)
      if (tags.length > 0) {
        processedArts = processedArts.filter(art => 
          tags.some(tagName => art.tagNames.includes(tagName))
        )
      }

      console.log(`‚úÖ getFurryArts: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ç–æ–≤: ${processedArts.length}`)
      return processedArts
      
    } catch (error) {
      console.error('‚ùå getFurryArts: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–æ–≤:', error)
      throw error
    }
  },

  // ‚úÖ –†–ï–ó–ï–†–í–ù–´–ô –ú–ï–¢–û–î: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–∞–º –µ—Å–ª–∏ gallery_view –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
  async getFurryArtsDirectQuery(options = {}) {
    const { 
      search = '', 
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîç getFurryArtsDirectQuery: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–∞–º...')
      
      let query = supabase
        .from('arts')
        .select(`
          id,
          title,
          image_url,
          thumbnail_url,
          is_nsfw,
          upload_date,
          art_collaborators!inner(
            role,
            persons!inner(
              nickname,
              avatar_url,
              is_friend
            )
          )
        `)
        .eq('is_deleted', false)
        .eq('art_collaborators.role', 'main_artist')

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (search.trim()) {
        query = query.ilike('title', `%${search}%`)
      }

      // NSFW —Ñ–∏–ª—å—Ç—Ä
      if (!showNsfw) {
        query = query.eq('is_nsfw', false)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (sort) {
        case 'newest':
          query = query.order('upload_date', { ascending: false })
          break
        case 'oldest':
          query = query.order('upload_date', { ascending: true })
          break
        case 'alphabetical':
          query = query.order('title', { ascending: true })
          break
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (offset > 0) {
        query = query.range(offset, offset + limit - 1)
      } else {
        query = query.limit(limit)
      }

      const { data, error } = await query

      if (error) throw error

      console.log(`‚úÖ getFurryArtsDirectQuery: –ü–æ–ª—É—á–µ–Ω–æ –∞—Ä—Ç–æ–≤: ${data?.length || 0}`)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const processedArts = (data || []).map(art => {
        const mainArtist = art.art_collaborators?.[0]?.persons
        
        return {
          id: art.id,
          title: art.title,
          image_url: art.image_url,
          thumbnail_url: art.thumbnail_url || art.image_url,
          is_nsfw: art.is_nsfw || false,
          created_date: art.upload_date,
          upload_date: art.upload_date,
          
          // –•—É–¥–æ–∂–Ω–∏–∫
          artist_name: mainArtist?.nickname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          artist_avatar: mainArtist?.avatar_url,
          artist_is_friend: mainArtist?.is_friend || false,
          
          // –ü—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          characters: [],
          tags: [],
          tagNames: []
        }
      })

      return processedArts
      
    } catch (error) {
      console.error('‚ùå getFurryArtsDirectQuery: –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error)
      return []
    }
  },

  // ============================================
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –•–£–î–û–ñ–ù–ò–ö–û–í –° –ü–û–î–°–ß–ï–¢–û–ú
  // ============================================
  
  async getFurryArtists() {
    try {
      console.log('üé® getFurryArtists: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∞—Ä—Ç–æ–≤...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
      const { data: artists, error: artistsError } = await supabase
        .from('persons')
        .select('*')
        .order('nickname', { ascending: true })

      if (artistsError) throw artistsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∞—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const { data: artCounts, error: countsError } = await supabase
        .from('art_collaborators')
        .select(`
          person_id,
          arts!inner(id)
        `)
        .eq('role', 'main_artist')
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –∞—Ä—Ç–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const artistsWithCounts = (artists || []).map(artist => {
        const artCount = countsError ? 0 : (artCounts || []).filter(count => 
          count.person_id === artist.id
        ).length
        
        console.log(`üë®‚Äçüé® ${artist.nickname}: ${artCount} –∞—Ä—Ç–æ–≤`)
        
        return {
          id: artist.id,
          name: artist.nickname,
          nickname: artist.nickname,
          avatar_url: artist.avatar_url,
          is_friend: artist.is_friend,
          created_at: artist.created_at,
          count: artCount,        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          artCount: artCount      // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–µ)
      const sortedArtists = artistsWithCounts.sort((a, b) => (b.artCount || 0) - (a.artCount || 0))
      
      console.log('‚úÖ getFurryArtists: –•—É–¥–æ–∂–Ω–∏–∫–∏ —Å –ø–æ–¥—Å—á–µ—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedArtists.length)
      console.log('üìä –¢–æ–ø 3 —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', sortedArtists.slice(0, 3).map(a => `${a.name}: ${a.artCount}`))
      
      return sortedArtists
      
    } catch (error) {
      console.error('‚ùå getFurryArtists: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤:', error)
      return []
    }
  },

  async createArtist(artistData) {
    try {
      console.log('‚ûï createArtist:', artistData)
      
      const existingArtist = await this.checkArtistExists(artistData.nickname)
      if (existingArtist) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('persons')
        .insert([{
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url?.trim() || null,
          is_friend: artistData.is_friend || false
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createArtist: –•—É–¥–æ–∂–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createArtist: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async updateArtist(artistId, artistData) {
    try {
      console.log('üîÑ updateArtist:', artistId, artistData)
      
      const { data, error } = await supabase
        .from('persons')
        .update({
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url?.trim() || null,
          is_friend: artistData.is_friend || false
        })
        .eq('id', artistId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateArtist: –•—É–¥–æ–∂–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateArtist: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async deleteArtist(artistId) {
    try {
      console.log('üóëÔ∏è deleteArtist:', artistId)
      
      const { error } = await supabase
        .from('persons')
        .delete()
        .eq('id', artistId)

      if (error) throw error
      console.log('‚úÖ deleteArtist: –•—É–¥–æ–∂–Ω–∏–∫ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteArtist: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async checkArtistExists(nickname) {
    try {
      const { data, error } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', nickname.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkArtistExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ì–û–í –° –ü–û–î–°–ß–ï–¢–û–ú (–ë–ï–ó color_hex!)
  // ============================================
  
  async getFurryTags() {
    try {
      console.log('üè∑Ô∏è getFurryTags: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ (–¢–û–õ–¨–ö–û —Ç–µ –ø–æ–ª—è, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î)
      const { data: tags, error: tagsError } = await supabase
        .from('tags')
        .select('id, name, created_at')  // ‚úÖ –¢–û–õ–¨–ö–û —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è!
        .order('name', { ascending: true })

      if (tagsError) throw tagsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–µ–≥–æ–≤
      const { data: tagCounts, error: countsError } = await supabase
        .from('art_tags')
        .select(`
          tag_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã —Ç–µ–≥–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
      const tagsWithCounts = (tags || []).map(tag => {
        const useCount = countsError ? 0 : (tagCounts || []).filter(count => 
          count.tag_id === tag.id
        ).length
        
        console.log(`üè∑Ô∏è ${tag.name}: ${useCount} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π`)
        
        return {
          id: tag.id,
          name: tag.name,
          created_at: tag.created_at,
          count: useCount,     // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          useCount: useCount   // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–µ)
      const sortedTags = tagsWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getFurryTags: –¢–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedTags.length)
      console.log('üìä –¢–æ–ø 5 —Ç–µ–≥–æ–≤:', sortedTags.slice(0, 5).map(t => `${t.name}: ${t.useCount}`))
      
      return sortedTags
      
    } catch (error) {
      console.error('‚ùå getFurryTags: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      return []
    }
  },

  async createTag(tagData) {
    try {
      console.log('‚ûï createTag:', tagData)
      
      const existingTag = await this.checkTagExists(tagData.name)
      if (existingTag) {
        throw new Error('–¢–µ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–û–õ–¨–ö–û –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î
      const { data, error } = await supabase
        .from('tags')
        .insert([{
          name: tagData.name.trim()
          // –ù–ï–¢ color_hex - —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ!
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createTag: –¢–µ–≥ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createTag: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async updateTag(tagId, tagData) {
    try {
      console.log('üîÑ updateTag:', tagId, tagData)
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–û–õ–¨–ö–û –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î
      const { data, error } = await supabase
        .from('tags')
        .update({
          name: tagData.name.trim()
          // –ù–ï–¢ color_hex - —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ!
        })
        .eq('id', tagId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateTag: –¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateTag: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async deleteTag(tagId) {
    try {
      console.log('üóëÔ∏è deleteTag:', tagId)
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞—Ä—Ç–∞–º–∏
      await supabase.from('art_tags').delete().eq('tag_id', tagId)
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–µ–≥
      const { error } = await supabase.from('tags').delete().eq('id', tagId)
      if (error) throw error
      
      console.log('‚úÖ deleteTag: –¢–µ–≥ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteTag: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async checkTagExists(tagName) {
    try {
      const { data, error } = await supabase
        .from('tags')
        .select('id')
        .eq('name', tagName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkTagExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ï–ô –° –ü–û–î–°–ß–ï–¢–û–ú
  // ============================================
  
  async getSpecies() {
    try {
      console.log('ü¶ä getSpecies: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characters, error: charactersError } = await supabase
        .from('fursonas')
        .select('*')
        .order('name', { ascending: true })

      if (charactersError) throw charactersError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characterCounts, error: countsError } = await supabase
        .from('art_fursonas')
        .select(`
          fursona_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const charactersWithCounts = (characters || []).map(character => {
        const useCount = countsError ? 0 : (characterCounts || []).filter(count => 
          count.fursona_id === character.id
        ).length
        
        console.log(`ü¶ä ${character.name}: ${useCount} –ø–æ—è–≤–ª–µ–Ω–∏–π`)
        
        return {
          id: character.id,
          name: character.name,
          avatar_url: character.avatar_url,
          created_at: character.created_at,
          count: useCount,     // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          useCount: useCount   // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–µ)
      const sortedCharacters = charactersWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getSpecies: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å –ø–æ–¥—Å—á–µ—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedCharacters.length)
      console.log('üìä –¢–æ–ø 3 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', sortedCharacters.slice(0, 3).map(c => `${c.name}: ${c.useCount}`))
      
      return sortedCharacters
      
    } catch (error) {
      console.error('‚ùå getSpecies: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      return []
    }
  },

  async createCharacter(characterData) {
    try {
      console.log('‚ûï createCharacter:', characterData)
      
      const existingCharacter = await this.checkCharacterExists(characterData.name)
      if (existingCharacter) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('fursonas')
        .insert([{
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url?.trim() || null,
          person_id: null // –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ö—É–¥–æ–∂–Ω–∏–∫—É –ø–æ–∑–∂–µ
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createCharacter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async updateCharacter(characterId, characterData) {
    try {
      console.log('üîÑ updateCharacter:', characterId, characterData)
      
      const { data, error } = await supabase
        .from('fursonas')
        .update({
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url?.trim() || null
        })
        .eq('id', characterId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateCharacter: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async deleteCharacter(characterId) {
    try {
      console.log('üóëÔ∏è deleteCharacter:', characterId)
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞—Ä—Ç–∞–º–∏
      await supabase.from('art_fursonas').delete().eq('fursona_id', characterId)
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const { error } = await supabase.from('fursonas').delete().eq('id', characterId)
      if (error) throw error
      
      console.log('‚úÖ deleteCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteCharacter: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async checkCharacterExists(characterName) {
    try {
      const { data, error } = await supabase
        .from('fursonas')
        .select('id')
        .eq('name', characterName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkCharacterExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ê–†–¢–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
  // ============================================
  
  async addFurryArt(artData) {
    try {
      console.log('‚ûï addFurryArt:', artData)
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π RPC —Ñ—É–Ω–∫—Ü–∏–∏
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      let artistId = null
      const { data: existingArtist, error: artistError } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', artData.artist_nickname)
        .maybeSingle()
      
      if (artistError) throw artistError
      
      if (existingArtist) {
        artistId = existingArtist.id
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        const { data: newArtist, error: createError } = await supabase
          .from('persons')
          .insert([{
            nickname: artData.artist_nickname,
            avatar_url: null,
            is_friend: false
          }])
          .select('id')
          .single()
        
        if (createError) throw createError
        artistId = newArtist.id
      }
      
      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–´–ï –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã –ë–î)
      const { data: artResult, error: artError } = await supabase
        .from('arts')
        .insert([{
          title: artData.title,
          image_url: artData.image_url,
          thumbnail_url: artData.thumbnail_url || artData.image_url,
          is_nsfw: artData.is_nsfw || false,  // ‚úÖ –ü–æ–ª–µ –µ—Å—Ç—å –≤ —Å—Ö–µ–º–µ
          upload_date: new Date().toISOString(),
          is_deleted: false
        }])
        .select('id')
        .single()
      
      if (artError) throw artError
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ö—É–¥–æ–∂–Ω–∏–∫-–∞—Ä—Ç –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫
      const { error: collaboratorError } = await supabase
        .from('art_collaborators')
        .insert([{
          art_id: artResult.id,
          person_id: artistId,
          role: 'main_artist'
        }])
      
      if (collaboratorError) throw collaboratorError

      console.log('‚úÖ addFurryArt: –ê—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:', artResult.id)
      return { id: artResult.id, ...artData }
      
    } catch (error) {
      console.error('‚ùå addFurryArt: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  async deleteArt(artId) {
    try {
      console.log('üóëÔ∏è deleteArt:', artId)
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
      await Promise.all([
        supabase.from('art_tags').delete().eq('art_id', artId),
        supabase.from('art_fursonas').delete().eq('art_id', artId),
        supabase.from('art_collaborators').delete().eq('art_id', artId)
      ])

      // –ü–æ–º–µ—á–∞–µ–º –∞—Ä—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π (soft delete)
      const { error } = await supabase
        .from('arts')
        .update({ is_deleted: true })
        .eq('id', artId)
      
      if (error) throw error
      
      console.log('‚úÖ deleteArt: –ê—Ä—Ç —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteArt: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  // ============================================
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ï–ô (–¢–ï–ì–ò –ò –ü–ï–†–°–û–ù–ê–ñ–ò)
  // ============================================
  
  async addArtTags(artId, tagNames) {
    try {
      console.log('üè∑Ô∏è addArtTags:', artId, tagNames)
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
      for (const tagName of tagNames) {
        const exists = await this.checkTagExists(tagName)
        if (!exists) {
          await this.createTag({ name: tagName })
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–≥–æ–≤
      const { data: tags, error: tagsError } = await supabase
        .from('tags')
        .select('id, name')
        .in('name', tagNames)

      if (tagsError) throw tagsError

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
      const tagLinks = tags.map(tag => ({
        art_id: artId,
        tag_id: tag.id
      }))

      const { error } = await supabase.from('art_tags').insert(tagLinks)
      if (error) throw error
      
      console.log('‚úÖ addArtTags: –¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return tagLinks
    } catch (error) {
      console.error('‚ùå addArtTags: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      throw error
    }
  },

  async addArtCharacters(artId, characterNames) {
    try {
      console.log('ü¶ä addArtCharacters:', artId, characterNames)
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
      for (const characterName of characterNames) {
        const exists = await this.checkCharacterExists(characterName)
        if (!exists) {
          await this.createCharacter({ name: characterName })
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characters, error: charactersError } = await supabase
        .from('fursonas')
        .select('id, name')
        .in('name', characterNames)

      if (charactersError) throw charactersError

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
      const characterLinks = characters.map((character, index) => ({
        art_id: artId,
        fursona_id: character.id,
        display_order: index + 1
      }))

      const { error } = await supabase.from('art_fursonas').insert(characterLinks)
      if (error) throw error
      
      console.log('‚úÖ addArtCharacters: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return characterLinks
    } catch (error) {
      console.error('‚ùå addArtCharacters: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      throw error
    }
  },

  // ============================================
  // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================
  
  async getDashboardStats() {
    try {
      console.log('üìä getDashboardStats: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const [artists, tags, characters, arts] = await Promise.all([
        this.getFurryArtists(),
        this.getFurryTags(), 
        this.getSpecies(),
        this.getFurryArts({ limit: 1000, showNsfw: true })
      ])
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        artists: artists.length,
        tags: tags.length,
        characters: characters.length,
        arts: arts.length,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        nsfwArts: arts.filter(art => art.is_nsfw).length,
        sfwArts: arts.filter(art => !art.is_nsfw).length,
        friendArtists: artists.filter(artist => artist.is_friend).length,
        
        // S3 —Ñ–∞–π–ª—ã
        s3Files: arts.filter(art => this.isS3Url(art.image_url)).length,
        
        // –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞ –Ω–µ–¥–µ–ª—é)
        recentUploads: arts.filter(art => {
          if (!art.created_date) return false
          const uploadDate = new Date(art.created_date)
          const weekAgo = new Date()
          weekAgo.setDate(weekAgo.getDate() - 7)
          return uploadDate >= weekAgo
        }).length,
        
        // –¢–æ–ø –¥–∞–Ω–Ω—ã–µ
        topArtist: artists.length > 0 ? artists[0] : null,
        topTag: tags.length > 0 ? tags[0] : null,
        topCharacter: characters.length > 0 ? characters[0] : null
      }
      
      console.log('‚úÖ getDashboardStats: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå getDashboardStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        artists: 0,
        tags: 0, 
        characters: 0,
        arts: 0,
        nsfwArts: 0,
        sfwArts: 0,
        friendArtists: 0,
        s3Files: 0,
        recentUploads: 0,
        topArtist: null,
        topTag: null,
        topCharacter: null
      }
    }
  },

  async getAdminStats() {
    try {
      console.log('üìä getAdminStats: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏...')
      return await this.getDashboardStats()
    } catch (error) {
      console.error('‚ùå getAdminStats: –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return { artists: 0, tags: 0, arts: 0 }
    }
  },

  // ============================================
  // ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================
  
  isS3Url(url) {
    if (!url) return false
    return url.includes('supabase.co/storage') || url.includes('gallery/')
  },

  // ============================================
  // ‚úÖ –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
  // ============================================
  
  async searchFurryContent(searchTerm) {
    return this.getFurryArts({ search: searchTerm })
  }
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const api = furryApi

// ‚úÖ –î–ï–§–û–õ–¢–ù–´–ô –≠–ö–°–ü–û–†–¢
export default furryApi

// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
console.log('‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API FOX TAFFY –ó–ê–ì–†–£–ñ–ï–ù!')
console.log('üîí –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Ö–∞—Ä–¥–∫–æ–¥–∞ –Ω–µ—Ç!')
console.log('üìä –°—á–µ—Ç—á–∏–∫–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, —Ç–µ–≥–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!')
console.log('üóÉÔ∏è API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ –ë–î!')
console.log('üéØ –í—Å–µ –º–µ—Ç–æ–¥—ã API –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!')