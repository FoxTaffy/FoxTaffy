// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API FOX TAFFY - –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –£–°–¢–†–ê–ù–ï–ù–´
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://plugjsubjcfblzkabjia.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBsdWdqc3ViamNmYmx6a2FiamlhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAzNDM4NTUsImV4cCI6MjA2NTkxOTg1NX0._SjaevspsFdM_0-dOc7zPTIfwDCspl39wkkHDMjtlKo'

export const supabase = createClient(supabaseUrl, supabaseKey)

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API –° –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ú–ò –ü–û–õ–Ø–ú–ò + loadAllData
export const furryApi = {
  
  // ============================================
  // ‚úÖ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - loadAllData (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
  // ============================================
  async loadAllData(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîÑ loadAllData: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ...')
      console.log('üìã –û–ø—Ü–∏–∏:', options)
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
      const [artsResult, artistsResult, tagsResult, charactersResult] = await Promise.all([
        this.getFurryArts(options),
        this.getFurryArtists(),
        this.getFurryTags(),
        this.getSpecies()
      ])
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const stats = {
        arts: artsResult.length,
        artists: artistsResult.length,
        tags: tagsResult.length,
        characters: charactersResult.length
      }
      
      console.log('‚úÖ loadAllData: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞—Ä—Ç–æ–≤ ${artsResult.length}, —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ ${artistsResult.length}, —Ç–µ–≥–æ–≤ ${tagsResult.length}, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ${charactersResult.length}`)
      
      return {
        arts: artsResult,
        artists: artistsResult,
        tags: tagsResult,
        characters: charactersResult,
        stats: stats
      }
      
    } catch (error) {
      console.error('‚ùå loadAllData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
    }
  },
  
  // ============================================
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –ê–†–¢–û–í
  // ============================================
  async getFurryArts(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showYiff = false,
      showNsfw = false, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É showNsfw
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîç getFurryArts: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      let query = supabase
        .from('gallery_view')
        .select('*')

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (search.trim()) {
        query = query.ilike('title', `%${search}%`)
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º
      if (artists.length > 0) {
        query = query.in('artist_name', artists)
      }

      // ‚úÖ NSFW —Ñ–∏–ª—å—Ç—Ä (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
      const hideNsfw = !showYiff && !showNsfw
      if (hideNsfw) {
        query = query.eq('is_nsfw', false)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (sort) {
        case 'newest':
          query = query.order('upload_date', { ascending: false })
          break
        case 'oldest':
          query = query.order('upload_date', { ascending: true })
          break
        case 'alphabetical':
          query = query.order('title', { ascending: true })
          break
        case 'alphabetical-desc':
          query = query.order('title', { ascending: false })
          break
        case 'artist':
          query = query.order('artist_name', { ascending: true })
          break
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (offset > 0) {
        query = query.range(offset, offset + limit - 1)
      } else {
        query = query.limit(limit)
      }

      const { data, error } = await query

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gallery_view:', error)
        if (error.message.includes('does not exist') || error.code === '42P01') {
          console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ gallery_view –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤')
          return []
        }
        throw error
      }

      console.log(`‚úÖ getFurryArts: –ü–æ–ª—É—á–µ–Ω–æ –∞—Ä—Ç–æ–≤ –∏–∑ gallery_view: ${data?.length || 0}`)

      // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      let processedArts = (data || []).map(art => ({
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        id: art.id,
        title: art.title,
        image_url: art.image_url,
        thumbnail_url: art.thumbnail_url || art.image_url,
        is_nsfw: art.is_nsfw || false,
        created_date: art.upload_date,
        created_at: art.upload_date,
        
        // –•—É–¥–æ–∂–Ω–∏–∫
        artist_name: art.artist_name,
        artist_avatar: art.artist_avatar,
        artist_is_friend: art.artist_is_friend,
        
        // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        characters: Array.isArray(art.characters) ? art.characters : [],
        depicted_fursona_names: Array.isArray(art.characters) ? 
          art.characters.map(c => c.name) : [],
        depicted_fursona_avatars: Array.isArray(art.characters) ? 
          art.characters.map(c => c.avatar) : [],
        
        // –¢–µ–≥–∏
        tags: Array.isArray(art.tags) ? art.tags.map(t => t.name) : [],
        tagNames: Array.isArray(art.tags) ? art.tags.map(t => t.name) : []
      }))

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º (–ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON)
      if (tags.length > 0) {
        processedArts = processedArts.filter(art => 
          tags.some(tagName => art.tagNames.includes(tagName))
        )
      }

      console.log(`‚úÖ getFurryArts: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ç–æ–≤: ${processedArts.length}`)
      return processedArts
      
    } catch (error) {
      console.error('‚ùå getFurryArts: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–æ–≤:', error)
      throw error
    }
  },

  // ============================================
  // ‚úÖ –•–£–î–û–ñ–ù–ò–ö–ò
  // ============================================
  
  async getFurryArtists() {
    try {
      console.log('üé® getFurryArtists: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤...')
      
      const { data, error } = await supabase
        .from('persons')
        .select('*')
        .order('nickname', { ascending: true })

      if (error) throw error
      
      console.log('‚úÖ getFurryArtists: –ü–æ–ª—É—á–µ–Ω—ã —Ö—É–¥–æ–∂–Ω–∏–∫–∏:', data?.length || 0)
      
      return (data || []).map(artist => ({
        id: artist.id,
        name: artist.nickname,
        nickname: artist.nickname,
        avatar_url: artist.avatar_url,
        is_friend: artist.is_friend,
        created_at: artist.created_at,
        count: 0 // –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      }))
    } catch (error) {
      console.error('‚ùå getFurryArtists: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤:', error)
      return []
    }
  },

  async createArtist(artistData) {
    try {
      console.log('‚ûï createArtist:', artistData)
      
      const existingArtist = await this.checkArtistExists(artistData.nickname)
      if (existingArtist) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('persons')
        .insert([{
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url?.trim() || null,
          is_friend: artistData.is_friend || false
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createArtist: –•—É–¥–æ–∂–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createArtist: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async updateArtist(artistId, artistData) {
    try {
      console.log('üîÑ updateArtist:', artistId, artistData)
      
      const { data, error } = await supabase
        .from('persons')
        .update({
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url?.trim() || null,
          is_friend: artistData.is_friend || false
        })
        .eq('id', artistId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateArtist: –•—É–¥–æ–∂–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateArtist: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async deleteArtist(artistId) {
    try {
      console.log('üóëÔ∏è deleteArtist:', artistId)
      
      const { error } = await supabase
        .from('persons')
        .delete()
        .eq('id', artistId)

      if (error) throw error
      console.log('‚úÖ deleteArtist: –•—É–¥–æ–∂–Ω–∏–∫ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteArtist: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  async checkArtistExists(nickname) {
    try {
      const { data, error } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', nickname.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkArtistExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –¢–ï–ì–ò
  // ============================================
  
  async getFurryTags() {
    try {
      console.log('üè∑Ô∏è getFurryTags: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏...')
      
      const { data, error } = await supabase
        .from('tags')
        .select('*')
        .order('name', { ascending: true })

      if (error) throw error
      
      console.log('‚úÖ getFurryTags: –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ–≥–∏:', data?.length || 0)
      
      return (data || []).map(tag => ({
        id: tag.id,
        name: tag.name,
        created_at: tag.created_at,
        count: 0
      }))
    } catch (error) {
      console.error('‚ùå getFurryTags: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      return []
    }
  },

  async createTag(tagData) {
    try {
      console.log('‚ûï createTag:', tagData)
      
      const existingTag = await this.checkTagExists(tagData.name)
      if (existingTag) {
        throw new Error('–¢–µ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('tags')
        .insert([{
          name: tagData.name.trim()
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createTag: –¢–µ–≥ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createTag: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async updateTag(tagId, tagData) {
    try {
      console.log('üîÑ updateTag:', tagId, tagData)
      
      const { data, error } = await supabase
        .from('tags')
        .update({
          name: tagData.name.trim()
        })
        .eq('id', tagId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateTag: –¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateTag: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async deleteTag(tagId) {
    try {
      console.log('üóëÔ∏è deleteTag:', tagId)
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞—Ä—Ç–∞–º–∏
      await supabase.from('art_tags').delete().eq('tag_id', tagId)
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º —Ç–µ–≥
      const { error } = await supabase.from('tags').delete().eq('id', tagId)
      if (error) throw error
      
      console.log('‚úÖ deleteTag: –¢–µ–≥ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteTag: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  async checkTagExists(tagName) {
    try {
      const { data, error } = await supabase
        .from('tags')
        .select('id')
        .eq('name', tagName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkTagExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –ü–ï–†–°–û–ù–ê–ñ–ò
  // ============================================
  
  async getSpecies() {
    try {
      console.log('ü¶ä getSpecies: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...')
      
      const { data, error } = await supabase
        .from('fursonas')
        .select('*')
        .order('name', { ascending: true })

      if (error) throw error
      
      console.log('‚úÖ getSpecies: –ü–æ–ª—É—á–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:', data?.length || 0)
      
      return (data || []).map(fursona => ({
        id: fursona.id,
        name: fursona.name,
        avatar_url: fursona.avatar_url,
        created_at: fursona.created_at,
        count: 0
      }))
    } catch (error) {
      console.error('‚ùå getSpecies: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      return []
    }
  },

  async createCharacter(characterData) {
    try {
      console.log('‚ûï createCharacter:', characterData)
      
      const existingCharacter = await this.checkCharacterExists(characterData.name)
      if (existingCharacter) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('fursonas')
        .insert([{
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url?.trim() || null,
          person_id: null
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createCharacter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async updateCharacter(characterId, characterData) {
    try {
      console.log('üîÑ updateCharacter:', characterId, characterData)
      
      const { data, error } = await supabase
        .from('fursonas')
        .update({
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url?.trim() || null
        })
        .eq('id', characterId)
        .select()

      if (error) throw error
      if (!data || data.length === 0) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      console.log('‚úÖ updateCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå updateCharacter: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async deleteCharacter(characterId) {
    try {
      console.log('üóëÔ∏è deleteCharacter:', characterId)
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞—Ä—Ç–∞–º–∏
      await supabase.from('art_fursonas').delete().eq('fursona_id', characterId)
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const { error } = await supabase.from('fursonas').delete().eq('id', characterId)
      if (error) throw error
      
      console.log('‚úÖ deleteCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteCharacter: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  async checkCharacterExists(characterName) {
    try {
      const { data, error } = await supabase
        .from('fursonas')
        .select('id')
        .eq('name', characterName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkCharacterExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      return false
    }
  },

  // ============================================
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ê–†–¢–û–í
  // ============================================
  
  async addFurryArt(artData) {
    try {
      console.log('‚ûï addFurryArt:', artData)
      
      const { data, error } = await supabase.rpc('add_simple_art', {
        p_title: artData.title,
        p_artist_nickname: artData.artist_nickname,
        p_image_url: artData.image_url,
        p_thumbnail_url: artData.thumbnail_url,
        p_is_nsfw: artData.is_nsfw || false
      })

      if (error) throw error
      console.log('‚úÖ addFurryArt: –ê—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:', data)
      return { id: data, ...artData }
    } catch (error) {
      console.error('‚ùå addFurryArt: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  async deleteArt(artId) {
    try {
      console.log('üóëÔ∏è deleteArt:', artId)
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
      await Promise.all([
        supabase.from('art_tags').delete().eq('art_id', artId),
        supabase.from('art_fursonas').delete().eq('art_id', artId),
        supabase.from('art_collaborators').delete().eq('art_id', artId)
      ])

      // –£–¥–∞–ª—è–µ–º —Å–∞–º –∞—Ä—Ç
      const { error } = await supabase.from('arts').delete().eq('id', artId)
      if (error) throw error
      
      console.log('‚úÖ deleteArt: –ê—Ä—Ç —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteArt: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  // ============================================
  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–í–Ø–ó–ï–ô (–¢–ï–ì–ò –ò –ü–ï–†–°–û–ù–ê–ñ–ò)
  // ============================================
  
  async addArtTags(artId, tagNames) {
    try {
      console.log('üè∑Ô∏è addArtTags:', artId, tagNames)
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
      for (const tagName of tagNames) {
        const exists = await this.checkTagExists(tagName)
        if (!exists) {
          await this.createTag({ name: tagName })
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–≥–æ–≤
      const { data: tags, error: tagsError } = await supabase
        .from('tags')
        .select('id, name')
        .in('name', tagNames)

      if (tagsError) throw tagsError

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
      const tagLinks = tags.map(tag => ({
        art_id: artId,
        tag_id: tag.id
      }))

      const { error } = await supabase.from('art_tags').insert(tagLinks)
      if (error) throw error
      
      console.log('‚úÖ addArtTags: –¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return tagLinks
    } catch (error) {
      console.error('‚ùå addArtTags: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      throw error
    }
  },

  async addArtCharacters(artId, characterNames) {
    try {
      console.log('ü¶ä addArtCharacters:', artId, characterNames)
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
      for (const characterName of characterNames) {
        const exists = await this.checkCharacterExists(characterName)
        if (!exists) {
          await this.createCharacter({ name: characterName })
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characters, error: charactersError } = await supabase
        .from('fursonas')
        .select('id, name')
        .in('name', characterNames)

      if (charactersError) throw charactersError

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
      const characterLinks = characters.map((character, index) => ({
        art_id: artId,
        fursona_id: character.id,
        display_order: index + 1
      }))

      const { error } = await supabase.from('art_fursonas').insert(characterLinks)
      if (error) throw error
      
      console.log('‚úÖ addArtCharacters: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      return characterLinks
    } catch (error) {
      console.error('‚ùå addArtCharacters: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      throw error
    }
  },

  // ============================================
  // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  // ============================================
  
  async getAdminStats() {
    try {
      console.log('üìä getAdminStats: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
      
      const [artists, tags, arts] = await Promise.all([
        this.getFurryArtists(),
        this.getFurryTags(),
        this.getFurryArts({ limit: 1000, showNsfw: true })
      ])

      const stats = {
        artists: artists.length,
        tags: tags.length,
        arts: arts.length
      }
      
      console.log('‚úÖ getAdminStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats)
      return stats
    } catch (error) {
      console.error('‚ùå getAdminStats: –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return { artists: 0, tags: 0, arts: 0 }
    }
  },

  // ============================================
  // ‚úÖ –ê–õ–ò–ê–°–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
  // ============================================
  
  async searchFurryContent(searchTerm) {
    return this.getFurryArts({ search: searchTerm })
  }
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const api = furryApi

// ‚úÖ –î–ï–§–û–õ–¢–ù–´–ô –≠–ö–°–ü–û–†–¢
export default furryApi

console.log('‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô API FOX TAFFY –ó–ê–ì–†–£–ñ–ï–ù!')
console.log('üéØ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:')
console.log('- ‚úÖ loadAllData - –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î!')
console.log('- ‚úÖ getFurryArts - –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–æ–≤')
console.log('- ‚úÖ getFurryArtists - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤') 
console.log('- ‚úÖ getFurryTags - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤')
console.log('- ‚úÖ getSpecies - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π')
console.log('- ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π')
console.log('- ‚úÖ NSFW —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç')
console.log('- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')