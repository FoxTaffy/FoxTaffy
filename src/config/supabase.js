// ===============================================
// üé™ FOXTAFFY.FUN - –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô SUPABASE API
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –≥–∞–ª–µ—Ä–µ–µ–π
// ===============================================

import { createClient } from '@supabase/supabase-js'

// ===============================================
// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
// ===============================================

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('‚ùå Supabase environment variables are not set. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.')
}

console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase:', {
  url: supabaseUrl,
  hasKey: !!supabaseAnonKey,
  keyLength: supabaseAnonKey?.length,
  environment: import.meta.env.MODE
})

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'User-Agent': 'FoxTaffy.fun/2.0'
    }
  }
})

// ===============================================
// üé™ –û–ë–™–ï–î–ò–ù–Å–ù–ù–´–ô API –ö–õ–ê–°–°
// ===============================================

export const furryApi = {

  // ============================================
  // üìÖ –ú–ï–¢–û–î–´ –î–õ–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô (CONS)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  async getEvents(options = {}) {
    const {
      status = 'all', // 'upcoming', 'completed', 'all', 'featured'
      event_type,
      attendance_status,
      city,
      search,
      featured = false,
      limit = 20,
      offset = 0,
      sort = 'date_desc' // 'date_desc', 'date_asc', 'name_asc', 'name_desc', 'rating_desc', 'created_desc'
    } = options

    try {
      console.log('üé™ getEvents: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      let query = supabase.from('events_full_stats').select('*')
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      if (!query) {
        query = supabase.from('cons_full_view').select('*')
      }
      
      // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      if (!query) {
        query = supabase.from('cons').select('*')
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status === 'upcoming') {
        query = query.gt('event_date', new Date().toISOString())
      } else if (status === 'completed') {
        query = query.lt('event_date', new Date().toISOString())
      } else if (status === 'featured') {
        query = query.eq('is_featured', true)
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (event_type) query = query.eq('event_type', event_type)
      if (attendance_status) query = query.eq('attendance_status', attendance_status)
      if (city) query = query.eq('city', city)
      if (featured) query = query.eq('is_featured', true)
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      if (search) {
        query = query.or(`name.ilike.%${search}%,location.ilike.%${search}%,subtitle.ilike.%${search}%`)
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortOptions = {
        'date_asc': { column: 'event_date', ascending: true },
        'date_desc': { column: 'event_date', ascending: false },
        'name_asc': { column: 'name', ascending: true },
        'name_desc': { column: 'name', ascending: false },
        'rating_desc': { column: 'my_rating', ascending: false },
        'created_desc': { column: 'created_at', ascending: false }
      }
      
      const sortConfig = sortOptions[sort] || sortOptions['date_desc']
      query = query.order(sortConfig.column, { ascending: sortConfig.ascending })
      
      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (limit > 0) {
        if (offset > 0) {
          query = query.range(offset, offset + limit - 1)
        } else {
          query = query.limit(limit)
        }
      }
      
      const { data, error } = await query
      
      if (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É:', error)
        return await this._getEventsFromBaseTable(options)
      }
      
      console.log(`‚úÖ getEvents: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå getEvents: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      return await this._getEventsFromBaseTable(options)
    }
  },

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
   */
  async _getEventsFromBaseTable(options) {
    try {
      console.log('üîÑ Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cons...')
      
      let query = supabase.from('cons').select('*')
      
      if (options.status === 'upcoming') {
        query = query.gt('event_date', new Date().toISOString())
      } else if (options.status === 'completed') {
        query = query.lt('event_date', new Date().toISOString())
      }
      
      if (options.featured) query = query.eq('is_featured', true)
      if (options.search) {
        query = query.or(`name.ilike.%${options.search}%,location.ilike.%${options.search}%`)
      }
      
      query = query.order('event_date', { ascending: false })
      
      if (options.limit) query = query.limit(options.limit)
      if (options.offset) query = query.range(options.offset, options.offset + options.limit - 1)
      
      const { data, error } = await query
      if (error) throw error
      
      return data || []
    } catch (error) {
      console.error('‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error)
      return []
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ slug —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  async getEventBySlug(slug) {
    try {
      console.log('üîç getEventBySlug: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', slug)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      let { data: event, error } = await supabase
        .from('events_full_stats')
        .select('*')
        .eq('slug', slug)
        .single()

      // Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      if (error) {
        console.log('üîÑ Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É cons...')
        const { data: fallbackEvent, error: fallbackError } = await supabase
          .from('cons')
          .select('*')
          .eq('slug', slug)
          .single()
          
        if (fallbackError) throw fallbackError
        event = fallbackEvent
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [linksData, featuresData, photosData, purchasesData] = await Promise.all([
        this.getEventLinks(event.id),
        this.getEventFeatures(event.id),
        this.getEventPhotos(event.id),
        this.getEventPurchases(event.id)
      ])

      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const fullEvent = {
        ...event,
        links: linksData,
        features: featuresData,
        photos: photosData,
        purchases: purchasesData
      }

      console.log('‚úÖ getEventBySlug: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
      return fullEvent

    } catch (error) {
      console.error('‚ùå getEventBySlug: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      if (error.code === 'PGRST116') return null
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async createEvent(eventData) {
    try {
      console.log('‚ûï createEvent: –°–æ–∑–¥–∞—ë–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventData.name)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
      if (!eventData.slug) {
        eventData.slug = eventData.name
          .toLowerCase()
          .replace(/[^–∞-—è—ë\w\s-]/gi, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim()
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
      const existingEvent = await this.checkEventSlugExists(eventData.slug)
      if (existingEvent) {
        eventData.slug = `${eventData.slug}-${Date.now()}`
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const cleanData = this._cleanEventData(eventData)
      
      const { data, error } = await supabase
        .from('cons')
        .insert([cleanData])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ createEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå createEvent: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async updateEvent(eventId, updateData) {
    try {
      console.log('üìù updateEvent: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      const cleanData = this._cleanEventData(updateData)
      cleanData.updated_at = new Date().toISOString()
      
      const { data, error } = await supabase
        .from('cons')
        .update(cleanData)
        .eq('id', eventId)
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ updateEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå updateEvent: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async deleteEvent(eventId) {
    try {
      console.log('üóëÔ∏è deleteEvent: –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      const { error } = await supabase
        .from('cons')
        .delete()
        .eq('id', eventId)
      
      if (error) throw error
      
      console.log('‚úÖ deleteEvent: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ')
      return true
      
    } catch (error) {
      console.error('‚ùå deleteEvent: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ slug
   */
  async checkEventSlugExists(slug) {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('id')
        .eq('slug', slug)
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkEventSlugExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ slug:', error)
      return false
    }
  },

  // ============================================
  // üîó –ú–ï–¢–û–î–´ –î–õ–Ø –°–°–´–õ–û–ö –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async getEventLinks(eventId) {
    try {
      console.log('üîó getEventLinks: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      const { data, error } = await supabase
        .from('con_links')
        .select('*')
        .eq('con_id', eventId)
        .eq('is_active', true)
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: true })
      
      if (error) throw error
      
      console.log(`‚úÖ getEventLinks: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Å—Å—ã–ª–æ–∫`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå getEventLinks: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   */
  async addEventLink(eventId, linkData) {
    try {
      console.log('‚ûï addEventLink: –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_links')
        .insert([{
          con_id: eventId,
          link_type: linkData.link_type || 'website',
          title: linkData.title?.trim(),
          url: linkData.url?.trim(),
          description: linkData.description?.trim(),
          icon_class: linkData.icon_class?.trim(),
          display_order: linkData.display_order || 0,
          is_primary: linkData.is_primary || false,
          is_active: linkData.is_active !== false
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ addEventLink: –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.title)
      return data
      
    } catch (error) {
      console.error('‚ùå addEventLink: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async removeEventLink(linkId) {
    try {
      const { error } = await supabase
        .from('con_links')
        .delete()
        .eq('id', linkId)
      
      if (error) throw error
      return true
      
    } catch (error) {
      console.error('‚ùå removeEventLink: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw error
    }
  },

  // ============================================
  // ‚≠ê –ú–ï–¢–û–î–´ –î–õ–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async getEventFeatures(eventId) {
    try {
      console.log('‚≠ê getEventFeatures: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      const { data, error } = await supabase
        .from('con_features')
        .select('*')
        .eq('con_id', eventId)
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: true })
      
      if (error) throw error
      
      console.log(`‚úÖ getEventFeatures: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå getEventFeatures: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   */
  async addEventFeature(eventId, featureData) {
    try {
      console.log('‚ûï addEventFeature: –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_features')
        .insert([{
          con_id: eventId,
          feature_type: featureData.feature_type || 'activity',
          title: featureData.title?.trim(),
          description: featureData.description?.trim(),
          icon_class: featureData.icon_class?.trim(),
          start_time: featureData.start_time,
          end_time: featureData.end_time,
          location_details: featureData.location_details?.trim(),
          requirements: featureData.requirements?.trim(),
          max_participants: featureData.max_participants,
          display_order: featureData.display_order || 0,
          is_featured: featureData.is_featured || false,
          is_free: featureData.is_free !== false,
          price: featureData.price || 0
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ addEventFeature: –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.title)
      return data
      
    } catch (error) {
      console.error('‚ùå addEventFeature: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${error.message}`)
    }
  },

  // ============================================
  // üì∏ –ú–ï–¢–û–î–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ô –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async getEventPhotos(eventId, options = {}) {
    try {
      console.log('üì∏ getEventPhotos: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      let query = supabase
        .from('con_photos')
        .select('*')
        .eq('con_id', eventId)
      
      // –§–∏–ª—å—Ç—Ä—ã
      if (options.photo_type) query = query.eq('photo_type', options.photo_type)
      if (options.featured_only) query = query.eq('is_featured', true)
      if (options.avatar_only) query = query.eq('is_avatar', true)
      if (options.limit) query = query.limit(options.limit)
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortBy = options.sort || 'display_order'
      const sortOrder = options.order === 'desc' ? { ascending: false } : { ascending: true }
      query = query.order(sortBy, sortOrder)
      
      if (sortBy !== 'taken_at') {
        query = query.order('taken_at', { ascending: false })
      }
      
      const { data, error } = await query
      
      if (error) throw error
      
      console.log(`‚úÖ getEventPhotos: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå getEventPhotos: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   */
  async addEventPhoto(eventId, photoData) {
    try {
      console.log('‚ûï addEventPhoto: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_photos')
        .insert([{
          con_id: eventId,
          image_url: photoData.image_url?.trim(),
          thumbnail_url: photoData.thumbnail_url?.trim(),
          caption: photoData.caption?.trim(),
          alt_text: photoData.alt_text?.trim(),
          photo_type: photoData.photo_type || 'general',
          is_featured: photoData.is_featured || false,
          is_avatar: photoData.is_avatar || false,
          taken_at: photoData.taken_at,
          taken_by: photoData.taken_by?.trim(),
          display_order: photoData.display_order || 0
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ addEventPhoto: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
      return data
      
    } catch (error) {
      console.error('‚ùå addEventPhoto: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${error.message}`)
    }
  },

  // ============================================
  // üõí –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ö–£–ü–û–ö –ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–•
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async getEventPurchases(eventId, options = {}) {
    try {
      console.log('üõí getEventPurchases: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      let query = supabase
        .from('con_purchases')
        .select('*')
        .eq('con_id', eventId)
      
      // –§–∏–ª—å—Ç—Ä—ã
      if (options.category) query = query.eq('category', options.category)
      if (options.vendor_name) query = query.ilike('vendor_name', `%${options.vendor_name}%`)
      if (options.status) {
        query = query.eq('status', options.status)
      } else {
        query = query.eq('status', 'completed')
      }
      if (options.limit) query = query.limit(options.limit)
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortBy = options.sort || 'purchased_at'
      const sortOrder = options.order === 'asc' ? { ascending: true } : { ascending: false }
      query = query.order(sortBy, sortOrder)
      
      const { data, error } = await query
      
      if (error) throw error
      
      console.log(`‚úÖ getEventPurchases: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –ø–æ–∫—É–ø–æ–∫`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå getEventPurchases: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   */
  async addEventPurchase(eventId, purchaseData) {
    try {
      console.log('‚ûï addEventPurchase: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_purchases')
        .insert([{
          con_id: eventId,
          item_name: purchaseData.item_name?.trim(),
          description: purchaseData.description?.trim(),
          price: purchaseData.price || 0,
          currency: purchaseData.currency || 'RUB',
          vendor_name: purchaseData.vendor_name?.trim(),
          category: purchaseData.category || 'other',
          image_url: purchaseData.image_url?.trim(),
          quantity: purchaseData.quantity || 1,
          purchased_at: purchaseData.purchased_at || new Date().toISOString(),
          status: purchaseData.status || 'completed'
        }])
        .select('*')
        .single()
      
      if (error) throw error

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
      await this.updateEventCounters(eventId)
      
      console.log('‚úÖ addEventPurchase: –ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.item_name)
      return data
      
    } catch (error) {
      console.error('‚ùå addEventPurchase: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async updateEventCounters(eventId) {
    try {
      const { data: purchaseStats, error } = await supabase
        .from('con_purchases')
        .select('price, quantity')
        .eq('con_id', eventId)
        .eq('status', 'completed')

      if (error) throw error

      const totalSpent = purchaseStats.reduce((sum, p) => sum + ((p.price || 0) * (p.quantity || 1)), 0)
      const purchasesCount = purchaseStats.length

      await supabase
        .from('cons')
        .update({
          total_spent: totalSpent,
          purchases_count: purchasesCount
        })
        .eq('id', eventId)

    } catch (error) {
      console.error('‚ùå updateEventCounters: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤:', error)
    }
  },

  // ============================================
  // üé® –ú–ï–¢–û–î–´ –î–õ–Ø –ì–ê–õ–ï–†–ï–ò –ò–°–ö–£–°–°–¢–í–ê
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
   */
  async getFurryArts(options = {}) {
    const { 
      search = '', 
      tags = [], 
      artists = [], 
      showYiff = false,
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üé® getFurryArts: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞—Ä—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ gallery_view
      let query = supabase.from('gallery_view').select('*')

      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      if (search.trim()) {
        query = query.ilike('title', `%${search}%`)
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞–º
      if (artists.length > 0) {
        query = query.in('artist_name', artists)
      }

      // NSFW —Ñ–∏–ª—å—Ç—Ä
      const hideNsfw = !showYiff && !showNsfw
      if (hideNsfw) {
        query = query.eq('is_nsfw', false)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      switch (sort) {
        case 'newest':
          query = query.order('upload_date', { ascending: false })
          break
        case 'oldest':
          query = query.order('upload_date', { ascending: true })
          break
        case 'alphabetical':
          query = query.order('title', { ascending: true })
          break
        case 'alphabetical-desc':
          query = query.order('title', { ascending: false })
          break
        case 'artist':
          query = query.order('artist_name', { ascending: true })
          break
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      if (offset > 0) {
        query = query.range(offset, offset + limit - 1)
      } else {
        query = query.limit(limit)
      }

      const { data, error } = await query

      if (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ gallery_view, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å:', error)
        return await this._getFurryArtsDirectQuery(options)
      }

      console.log(`‚úÖ getFurryArts: –ü–æ–ª—É—á–µ–Ω–æ –∞—Ä—Ç–æ–≤ –∏–∑ gallery_view: ${data?.length || 0}`)

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
      let processedArts = (data || []).map(art => ({
        id: art.id,
        title: art.title,
        image_url: art.image_url,
        thumbnail_url: art.thumbnail_url || art.image_url,
        is_nsfw: art.is_nsfw || false,
        created_date: art.upload_date,
        upload_date: art.upload_date,
        artist_name: art.artist_name,
        artist_avatar: art.artist_avatar,
        artist_is_friend: art.artist_is_friend,
        characters: Array.isArray(art.characters) ? art.characters : [],
        tags: Array.isArray(art.tags) ? art.tags.map(t => t.name) : [],
        tagNames: Array.isArray(art.tags) ? art.tags.map(t => t.name) : []
      }))

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
      if (tags.length > 0) {
        processedArts = processedArts.filter(art => 
          tags.some(tagName => art.tagNames.includes(tagName))
        )
      }

      console.log(`‚úÖ getFurryArts: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ç–æ–≤: ${processedArts.length}`)
      return processedArts
      
    } catch (error) {
      console.error('‚ùå getFurryArts: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä—Ç–æ–≤:', error)
      return await this._getFurryArtsDirectQuery(options)
    }
  },

  /**
   * –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–∞–º –µ—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
   */
  async _getFurryArtsDirectQuery(options = {}) {
    const { 
      search = '', 
      showNsfw = false,
      sort = 'newest',
      limit = 24,
      offset = 0
    } = options

    try {
      console.log('üîç _getFurryArtsDirectQuery: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–∞–º...')
      
      let query = supabase
        .from('arts')
        .select(`
          id,
          title,
          image_url,
          thumbnail_url,
          is_nsfw,
          upload_date,
          art_collaborators!inner(
            role,
            persons!inner(
              nickname,
              avatar_url,
              is_friend
            )
          )
        `)
        .eq('is_deleted', false)
        .eq('art_collaborators.role', 'main_artist')

      if (search.trim()) query = query.ilike('title', `%${search}%`)
      if (!showNsfw) query = query.eq('is_nsfw', false)

      switch (sort) {
        case 'newest': query = query.order('upload_date', { ascending: false }); break
        case 'oldest': query = query.order('upload_date', { ascending: true }); break
        case 'alphabetical': query = query.order('title', { ascending: true }); break
      }

      if (offset > 0) {
        query = query.range(offset, offset + limit - 1)
      } else {
        query = query.limit(limit)
      }

      const { data, error } = await query
      if (error) throw error

      const processedArts = (data || []).map(art => {
        const mainArtist = art.art_collaborators?.[0]?.persons
        
        return {
          id: art.id,
          title: art.title,
          image_url: art.image_url,
          thumbnail_url: art.thumbnail_url || art.image_url,
          is_nsfw: art.is_nsfw || false,
          created_date: art.upload_date,
          upload_date: art.upload_date,
          artist_name: mainArtist?.nickname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          artist_avatar: mainArtist?.avatar_url,
          artist_is_friend: mainArtist?.is_friend || false,
          characters: [],
          tags: [],
          tagNames: []
        }
      })

      return processedArts
      
    } catch (error) {
      console.error('‚ùå _getFurryArtsDirectQuery: –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error)
      return []
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ç
   */
  async addFurryArt(artData) {
    try {
      console.log('‚ûï addFurryArt: –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç:', artData.title)
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      let artistId = null
      const { data: existingArtist, error: artistError } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', artData.artist_nickname)
        .maybeSingle()
      
      if (artistError) throw artistError
      
      if (existingArtist) {
        artistId = existingArtist.id
      } else {
        const { data: newArtist, error: createError } = await supabase
          .from('persons')
          .insert([{
            nickname: artData.artist_nickname,
            avatar_url: null,
            is_friend: false
          }])
          .select('id')
          .single()
        
        if (createError) throw createError
        artistId = newArtist.id
      }
      
      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç
      const { data: artResult, error: artError } = await supabase
        .from('arts')
        .insert([{
          title: artData.title,
          image_url: artData.image_url,
          thumbnail_url: artData.thumbnail_url || artData.image_url,
          is_nsfw: artData.is_nsfw || false,
          upload_date: new Date().toISOString(),
          is_deleted: false
        }])
        .select('id')
        .single()
      
      if (artError) throw artError
      
      // –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º
      const { error: collaboratorError } = await supabase
        .from('art_collaborators')
        .insert([{
          art_id: artResult.id,
          person_id: artistId,
          role: 'main_artist'
        }])
      
      if (collaboratorError) throw collaboratorError

      console.log('‚úÖ addFurryArt: –ê—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID:', artResult.id)
      return { id: artResult.id, ...artData }
      
    } catch (error) {
      console.error('‚ùå addFurryArt: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç
   */
  async deleteArt(artId) {
    try {
      console.log('üóëÔ∏è deleteArt: –£–¥–∞–ª—è–µ–º –∞—Ä—Ç:', artId)
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
      await Promise.all([
        supabase.from('art_tags').delete().eq('art_id', artId),
        supabase.from('art_fursonas').delete().eq('art_id', artId),
        supabase.from('art_collaborators').delete().eq('art_id', artId)
      ])

      // –ü–æ–º–µ—á–∞–µ–º –∞—Ä—Ç –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
      const { error } = await supabase
        .from('arts')
        .update({ is_deleted: true })
        .eq('id', artId)
      
      if (error) throw error
      
      console.log('‚úÖ deleteArt: –ê—Ä—Ç —É–¥–∞–ª–µ–Ω')
      return true
    } catch (error) {
      console.error('‚ùå deleteArt: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ç–∞:', error)
      throw error
    }
  },

  // ============================================
  // üë®‚Äçüé® –ú–ï–¢–û–î–´ –î–õ–Ø –•–£–î–û–ñ–ù–ò–ö–û–í
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∞—Ä—Ç–æ–≤
   */
  async getFurryArtists() {
    try {
      console.log('üë®‚Äçüé® getFurryArtists: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∞—Ä—Ç–æ–≤...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤
      const { data: artists, error: artistsError } = await supabase
        .from('persons')
        .select('*')
        .order('nickname', { ascending: true })

      if (artistsError) throw artistsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∞—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const { data: artCounts, error: countsError } = await supabase
        .from('art_collaborators')
        .select(`
          person_id,
          arts!inner(id)
        `)
        .eq('role', 'main_artist')
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –∞—Ä—Ç–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
      const artistsWithCounts = (artists || []).map(artist => {
        const artCount = countsError ? 0 : (artCounts || []).filter(count => 
          count.person_id === artist.id
        ).length
        
        return {
          id: artist.id,
          name: artist.nickname,
          nickname: artist.nickname,
          avatar_url: artist.avatar_url,
          is_friend: artist.is_friend,
          created_at: artist.created_at,
          count: artCount,
          artCount: artCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞—Ä—Ç–æ–≤
      const sortedArtists = artistsWithCounts.sort((a, b) => (b.artCount || 0) - (a.artCount || 0))
      
      console.log('‚úÖ getFurryArtists: –•—É–¥–æ–∂–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedArtists.length)
      return sortedArtists
      
    } catch (error) {
      console.error('‚ùå getFurryArtists: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
   */
  async createArtist(artistData) {
    try {
      console.log('‚ûï createArtist: –°–æ–∑–¥–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', artistData.nickname)
      
      const existingArtist = await this.checkArtistExists(artistData.nickname)
      if (existingArtist) {
        throw new Error('–•—É–¥–æ–∂–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('persons')
        .insert([{
          nickname: artistData.nickname.trim(),
          avatar_url: artistData.avatar_url?.trim() || null,
          is_friend: artistData.is_friend || false
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createArtist: –•—É–¥–æ–∂–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createArtist: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
   */
  async checkArtistExists(nickname) {
    try {
      const { data, error } = await supabase
        .from('persons')
        .select('id')
        .eq('nickname', nickname.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkArtistExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞:', error)
      return false
    }
  },

  // ============================================
  // üè∑Ô∏è –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ï–ì–û–í
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
   */
  async getFurryTags() {
    try {
      console.log('üè∑Ô∏è getFurryTags: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
      const { data: tags, error: tagsError } = await supabase
        .from('tags')
        .select('id, name, created_at')
        .order('name', { ascending: true })

      if (tagsError) throw tagsError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ç–µ–≥–æ–≤
      const { data: tagCounts, error: countsError } = await supabase
        .from('art_tags')
        .select(`
          tag_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã —Ç–µ–≥–æ–≤:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
      const tagsWithCounts = (tags || []).map(tag => {
        const useCount = countsError ? 0 : (tagCounts || []).filter(count => 
          count.tag_id === tag.id
        ).length
        
        return {
          id: tag.id,
          name: tag.name,
          created_at: tag.created_at,
          count: useCount,
          useCount: useCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
      const sortedTags = tagsWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getFurryTags: –¢–µ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedTags.length)
      return sortedTags
      
    } catch (error) {
      console.error('‚ùå getFurryTags: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥
   */
  async createTag(tagData) {
    try {
      console.log('‚ûï createTag: –°–æ–∑–¥–∞–µ–º —Ç–µ–≥:', tagData.name)
      
      const existingTag = await this.checkTagExists(tagData.name)
      if (existingTag) {
        throw new Error('–¢–µ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('tags')
        .insert([{
          name: tagData.name.trim()
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createTag: –¢–µ–≥ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createTag: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
   */
  async checkTagExists(tagName) {
    try {
      const { data, error } = await supabase
        .from('tags')
        .select('id')
        .eq('name', tagName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkTagExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∞:', error)
      return false
    }
  },

  // ============================================
  // ü¶ä –ú–ï–¢–û–î–´ –î–õ–Ø –ü–ï–†–°–û–ù–ê–ñ–ï–ô
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–π
   */
  async getSpecies() {
    try {
      console.log('ü¶ä getSpecies: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–π...')
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characters, error: charactersError } = await supabase
        .from('fursonas')
        .select('*')
        .order('name', { ascending: true })

      if (charactersError) throw charactersError
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      const { data: characterCounts, error: countsError } = await supabase
        .from('art_fursonas')
        .select(`
          fursona_id,
          arts!inner(id)
        `)
        .eq('arts.is_deleted', false)

      if (countsError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', countsError)
      }
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      const charactersWithCounts = (characters || []).map(character => {
        const useCount = countsError ? 0 : (characterCounts || []).filter(count => 
          count.fursona_id === character.id
        ).length
        
        return {
          id: character.id,
          name: character.name,
          avatar_url: character.avatar_url,
          created_at: character.created_at,
          count: useCount,
          useCount: useCount
        }
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—è–≤–ª–µ–Ω–∏–π
      const sortedCharacters = charactersWithCounts.sort((a, b) => (b.useCount || 0) - (a.useCount || 0))
      
      console.log('‚úÖ getSpecies: –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', sortedCharacters.length)
      return sortedCharacters
      
    } catch (error) {
      console.error('‚ùå getSpecies: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', error)
      return []
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async createCharacter(characterData) {
    try {
      console.log('‚ûï createCharacter: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', characterData.name)
      
      const existingCharacter = await this.checkCharacterExists(characterData.name)
      if (existingCharacter) {
        throw new Error('–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { data, error } = await supabase
        .from('fursonas')
        .insert([{
          name: characterData.name.trim(),
          avatar_url: characterData.avatar_url?.trim() || null,
          person_id: null
        }])
        .select()

      if (error) throw error
      console.log('‚úÖ createCharacter: –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:', data[0])
      return data[0]
    } catch (error) {
      console.error('‚ùå createCharacter: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      throw error
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async checkCharacterExists(characterName) {
    try {
      const { data, error } = await supabase
        .from('fursonas')
        .select('id')
        .eq('name', characterName.trim())
        .maybeSingle()

      if (error) throw error
      return !!data
    } catch (error) {
      console.error('‚ùå checkCharacterExists: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error)
      return false
    }
  },

  // ============================================
  // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  async getEventsStats() {
    try {
      console.log('üìä getEventsStats: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...')
      
      const { data, error } = await supabase
        .from('cons')
        .select(`
          id,
          status,
          event_type,
          my_rating,
          total_spent,
          attendees_count,
          event_date
        `)

      if (error) throw error

      const now = new Date()
      const upcoming = data.filter(e => new Date(e.event_date) > now)
      const completed = data.filter(e => new Date(e.event_date) <= now)

      const stats = {
        total: data.length,
        upcoming: upcoming.length,
        completed: completed.length,
        totalSpent: data.reduce((sum, e) => sum + (e.total_spent || 0), 0),
        averageRating: data.filter(e => e.my_rating).length > 0 ? 
          (data.filter(e => e.my_rating).reduce((sum, e) => sum + e.my_rating, 0) / 
           data.filter(e => e.my_rating).length).toFixed(1) : 0,
        byType: {}
      }

      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
      data.forEach(event => {
        const type = event.event_type || 'convention'
        stats.byType[type] = (stats.byType[type] || 0) + 1
      })

      console.log('‚úÖ getEventsStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå getEventsStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return { 
        total: 0, 
        upcoming: 0, 
        completed: 0, 
        totalSpent: 0, 
        averageRating: 0, 
        byType: {} 
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–ª–µ—Ä–µ–∏
   */
  async getDashboardStats() {
    try {
      console.log('üìä getDashboardStats: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const [artists, tags, characters, arts] = await Promise.all([
        this.getFurryArtists(),
        this.getFurryTags(), 
        this.getSpecies(),
        this.getFurryArts({ limit: 1000, showNsfw: true })
      ])
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        artists: artists.length,
        tags: tags.length,
        characters: characters.length,
        arts: arts.length,
        nsfwArts: arts.filter(art => art.is_nsfw).length,
        sfwArts: arts.filter(art => !art.is_nsfw).length,
        friendArtists: artists.filter(artist => artist.is_friend).length,
        s3Files: arts.filter(art => this.isS3Url(art.image_url)).length,
        recentUploads: arts.filter(art => {
          if (!art.created_date) return false
          const uploadDate = new Date(art.created_date)
          const weekAgo = new Date()
          weekAgo.setDate(weekAgo.getDate() - 7)
          return uploadDate >= weekAgo
        }).length,
        topArtist: artists.length > 0 ? artists[0] : null,
        topTag: tags.length > 0 ? tags[0] : null,
        topCharacter: characters.length > 0 ? characters[0] : null
      }
      
      console.log('‚úÖ getDashboardStats: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats)
      return stats
      
    } catch (error) {
      console.error('‚ùå getDashboardStats: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        artists: 0, tags: 0, characters: 0, arts: 0,
        nsfwArts: 0, sfwArts: 0, friendArtists: 0, s3Files: 0,
        recentUploads: 0, topArtist: null, topTag: null, topCharacter: null
      }
    }
  },

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏
   */
  async loadAllData(options = {}) {
    try {
      console.log('üîÑ loadAllData: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏...')
      
      const [artsResult, artistsResult, tagsResult, charactersResult] = await Promise.all([
        this.getFurryArts(options),
        this.getFurryArtists(),
        this.getFurryTags(),
        this.getSpecies()
      ])
      
      const stats = {
        arts: artsResult.length,
        artists: artistsResult.length,
        tags: tagsResult.length,
        characters: charactersResult.length,
        nsfwArts: artsResult.filter(art => art.is_nsfw).length,
        sfwArts: artsResult.filter(art => !art.is_nsfw).length,
        friendArtists: artistsResult.filter(artist => artist.is_friend).length,
        s3Files: artsResult.filter(art => this.isS3Url(art.image_url)).length
      }
      
      console.log('‚úÖ loadAllData: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
      
      return {
        arts: artsResult,
        artists: artistsResult,
        tags: tagsResult,
        characters: charactersResult,
        stats: stats
      }
      
    } catch (error) {
      console.error('‚ùå loadAllData: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
    }
  },

  // ============================================
  // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   */
  _cleanEventData(eventData) {
    const cleanData = {}
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (eventData.name) cleanData.name = eventData.name.trim()
    if (eventData.slug) cleanData.slug = eventData.slug.trim().toLowerCase()
    if (eventData.event_date) cleanData.event_date = eventData.event_date
    if (eventData.location) cleanData.location = eventData.location.trim()
    
    // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    const stringFields = [
      'subtitle', 'description', 'short_description', 'city', 'country', 
      'address', 'venue_url', 'banner_url', 'logo_url', 'gallery_folder',
      'my_role', 'my_review', 'meta_title', 'meta_description', 'og_image',
      'official_website', 'tickets_url', 'currency'
    ]
    
    stringFields.forEach(field => {
      if (eventData[field] && typeof eventData[field] === 'string') {
        cleanData[field] = eventData[field].trim()
      }
    })
    
    // –î–∞—Ç—ã
    const dateFields = [
      'announced_date', 'registration_start', 'registration_end'
    ]
    
    dateFields.forEach(field => {
      if (eventData[field]) {
        cleanData[field] = eventData[field]
      }
    })
    
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
    if (eventData.status) cleanData.status = eventData.status
    if (eventData.event_type) cleanData.event_type = eventData.event_type
    if (eventData.attendance_status) cleanData.attendance_status = eventData.attendance_status
    
    // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const numberFields = [
      'attendees_count', 'expected_visitors', 'my_rating', 
      'entrance_fee', 'total_spent'
    ]
    
    numberFields.forEach(field => {
      if (eventData[field] !== undefined && eventData[field] !== null && eventData[field] !== '') {
        const num = parseFloat(eventData[field])
        if (!isNaN(num)) {
          cleanData[field] = num
        }
      }
    })
    
    // –ë—É–ª–µ–≤—ã –ø–æ–ª—è
    const booleanFields = [
      'has_dealers_den', 'has_art_show', 'has_fursuit_parade', 'has_competitions',
      'is_featured', 'is_nsfw', 'is_online'
    ]
    
    booleanFields.forEach(field => {
      if (eventData[field] !== undefined) {
        cleanData[field] = Boolean(eventData[field])
      }
    })
    
    // JSON –ø–æ–ª—è
    if (eventData.extra_data && typeof eventData.extra_data === 'object') {
      cleanData.extra_data = eventData.extra_data
    }
    
    return cleanData
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 URL
   */
  isS3Url(url) {
    if (!url) return false
    return url.includes('supabase.co/storage') || url.includes('gallery/')
  },

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
   */
  async searchEvents(searchQuery, options = {}) {
    return this.getEvents({
      search: searchQuery,
      ...options
    })
  },

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –≥–∞–ª–µ—Ä–µ–µ
   */
  async searchFurryContent(searchTerm) {
    return this.getFurryArts({ search: searchTerm })
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   */
  async testConnection() {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('count')
        .limit(1)
      
      if (error) throw error
      
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', error)
      return false
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
   */
  async getTableInfo() {
    try {
      const tables = []
      
      const tablesData = await Promise.allSettled([
        supabase.from('cons').select('count', { count: 'exact', head: true }),
        supabase.from('con_links').select('count', { count: 'exact', head: true }),
        supabase.from('con_features').select('count', { count: 'exact', head: true }),
        supabase.from('con_photos').select('count', { count: 'exact', head: true }),
        supabase.from('con_purchases').select('count', { count: 'exact', head: true }),
        supabase.from('arts').select('count', { count: 'exact', head: true }),
        supabase.from('persons').select('count', { count: 'exact', head: true }),
        supabase.from('tags').select('count', { count: 'exact', head: true }),
        supabase.from('fursonas').select('count', { count: 'exact', head: true })
      ])
      
      const tableNames = [
        'cons', 'con_links', 'con_features', 'con_photos', 'con_purchases',
        'arts', 'persons', 'tags', 'fursonas'
      ]
      
      tablesData.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          tables.push({
            name: tableNames[index],
            count: result.value.count || 0,
            status: 'ok'
          })
        } else {
          tables.push({
            name: tableNames[index],
            count: 0,
            status: 'error',
            error: result.reason?.message
          })
        }
      })
      
      return tables
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:', error)
      return []
    }
  }
}

// ===============================================
// üöÄ –≠–ö–°–ü–û–†–¢ API
// ===============================================

export default furryApi

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { furryApi as eventApi, furryApi as consApi, furryApi as api }

console.log('üé™ FoxTaffy Unified API initialized successfully!')
console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≥–∞–ª–µ—Ä–µ—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω–æ–º API!')
console.log('üîí –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω—ã!')
console.log('üìä –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
console.log('üéØ API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')