// ===============================================
// üé™ FOXTAFFY.FUN - –ü–û–õ–ù–´–ô SUPABASE API
// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
// ===============================================

import { createClient } from '@supabase/supabase-js'

// ===============================================
// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
// ===============================================

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('‚ùå Supabase environment variables are not set')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  db: {
    schema: 'public'
  }
})

// ===============================================
// üé™ –û–°–ù–û–í–ù–û–ô API –ö–õ–ê–°–°
// ===============================================

export const furryApi = {

  // ============================================
  // üìÖ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô (CONS)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   */
  async getEvents(options = {}) {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ–ø—Ü–∏—è–º–∏:', options)
      
      let query = supabase.from('events_full_stats').select('*')
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (options.status === 'upcoming') {
        query = query.gt('event_date', new Date().toISOString())
      } else if (options.status === 'completed') {
        query = query.lt('event_date', new Date().toISOString())
      } else if (options.status === 'featured') {
        query = query.eq('is_featured', true)
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      if (options.event_type) {
        query = query.eq('event_type', options.event_type)
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É —É—á–∞—Å—Ç–∏—è
      if (options.attendance_status) {
        query = query.eq('attendance_status', options.attendance_status)
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
      if (options.city) {
        query = query.eq('city', options.city)
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      if (options.search) {
        query = query.or(`name.ilike.%${options.search}%,location.ilike.%${options.search}%,subtitle.ilike.%${options.search}%`)
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortOptions = {
        'date_asc': { column: 'event_date', ascending: true },
        'date_desc': { column: 'event_date', ascending: false },
        'name_asc': { column: 'name', ascending: true },
        'name_desc': { column: 'name', ascending: false },
        'rating_desc': { column: 'my_rating', ascending: false },
        'created_desc': { column: 'created_at', ascending: false }
      }
      
      const sort = sortOptions[options.sort] || sortOptions['date_desc']
      query = query.order(sort.column, { ascending: sort.ascending })
      
      // –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (options.limit) {
        query = query.limit(options.limit)
      }
      
      // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      if (options.offset) {
        query = query.range(options.offset, options.offset + (options.limit || 50) - 1)
      }
      
      const { data, error } = await query
      
      if (error) throw error
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${error.message}`)
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ slug
   * @param {string} slug - URL slug –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<Object|null>} –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ null
   */
  async getEventBySlug(slug) {
    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ slug:', slug)
      
      const { data, error } = await supabase
        .from('events_full_stats')
        .select('*')
        .eq('slug', slug)
        .single()
      
      if (error) {
        if (error.code === 'PGRST116') {
          console.log('‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', slug)
          return null
        }
        throw error
      }
      
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async createEvent(eventData) {
    try {
      console.log('‚ûï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventData.name)
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const cleanData = this._cleanEventData(eventData)
      
      // –°–æ–∑–¥–∞—ë–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const { data, error } = await supabase
        .from('cons')
        .insert([cleanData])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async updateEvent(eventId, updateData) {
    try {
      console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const cleanData = this._cleanEventData(updateData)
      cleanData.updated_at = new Date().toISOString()
      
      const { data, error } = await supabase
        .from('cons')
        .update(cleanData)
        .eq('id', eventId)
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data.name)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteEvent(eventId) {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventId)
      
      const { error } = await supabase
        .from('cons')
        .delete()
        .eq('id', eventId)
      
      if (error) throw error
      
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ')
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`)
    }
  },

  // ============================================
  // üîó –ú–ï–¢–û–î–´ –î–õ–Ø –°–°–´–õ–û–ö (CON_LINKS)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
   */
  async getEventLinks(eventId) {
    try {
      console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      const { data, error } = await supabase
        .from('con_links')
        .select('*')
        .eq('con_id', eventId)
        .eq('is_active', true)
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: true })
      
      if (error) throw error
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Å—Å—ã–ª–æ–∫`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫: ${error.message}`)
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} linkData - –î–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
   */
  async addEventLink(eventId, linkData) {
    try {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_links')
        .insert([{
          con_id: eventId,
          link_type: linkData.link_type || 'website',
          title: linkData.title?.trim(),
          url: linkData.url?.trim(),
          description: linkData.description?.trim(),
          icon_class: linkData.icon_class?.trim(),
          display_order: linkData.display_order || 0,
          is_primary: linkData.is_primary || false,
          is_active: linkData.is_active !== false
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.title)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
   * @param {string} linkId - ID —Å—Å—ã–ª–∫–∏
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
   */
  async updateEventLink(linkId, updateData) {
    try {
      const { data, error } = await supabase
        .from('con_links')
        .update(updateData)
        .eq('id', linkId)
        .select('*')
        .single()
      
      if (error) throw error
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
   * @param {string} linkId - ID —Å—Å—ã–ª–∫–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteEventLink(linkId) {
    try {
      const { error } = await supabase
        .from('con_links')
        .delete()
        .eq('id', linkId)
      
      if (error) throw error
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: ${error.message}`)
    }
  },

  // ============================================
  // ‚≠ê –ú–ï–¢–û–î–´ –î–õ–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô (CON_FEATURES)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
   */
  async getEventFeatures(eventId) {
    try {
      console.log('‚≠ê –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      const { data, error } = await supabase
        .from('con_features')
        .select('*')
        .eq('con_id', eventId)
        .order('display_order', { ascending: true })
        .order('created_at', { ascending: true })
      
      if (error) throw error
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π: ${error.message}`)
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} featureData - –î–∞–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å
   */
  async addEventFeature(eventId, featureData) {
    try {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_features')
        .insert([{
          con_id: eventId,
          feature_type: featureData.feature_type || 'activity',
          title: featureData.title?.trim(),
          description: featureData.description?.trim(),
          icon_class: featureData.icon_class?.trim(),
          start_time: featureData.start_time,
          end_time: featureData.end_time,
          location_details: featureData.location_details?.trim(),
          requirements: featureData.requirements?.trim(),
          max_participants: featureData.max_participants,
          display_order: featureData.display_order || 0,
          is_featured: featureData.is_featured || false,
          is_free: featureData.is_free !== false,
          price: featureData.price || 0
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.title)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å
   * @param {string} featureId - ID –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å
   */
  async updateEventFeature(featureId, updateData) {
    try {
      const { data, error } = await supabase
        .from('con_features')
        .update(updateData)
        .eq('id', featureId)
        .select('*')
        .single()
      
      if (error) throw error
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å
   * @param {string} featureId - ID –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteEventFeature(featureId) {
    try {
      const { error } = await supabase
        .from('con_features')
        .delete()
        .eq('id', featureId)
      
      if (error) throw error
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${error.message}`)
    }
  },

  // ============================================
  // üì∏ –ú–ï–¢–û–î–´ –î–õ–Ø –§–û–¢–û–ì–†–ê–§–ò–ô (CON_PHOTOS)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
   */
  async getEventPhotos(eventId, options = {}) {
    try {
      console.log('üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      let query = supabase
        .from('con_photos')
        .select('*')
        .eq('con_id', eventId)
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      if (options.photo_type) {
        query = query.eq('photo_type', options.photo_type)
      }
      
      // –¢–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
      if (options.featured_only) {
        query = query.eq('is_featured', true)
      }
      
      // –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ —Ñ–æ—Ç–æ (–∞–≤–∞—Ç–∞—Ä—ã —Å–æ–±—ã—Ç–∏–π)
      if (options.avatar_only) {
        query = query.eq('is_avatar', true)
      }
      
      // –õ–∏–º–∏—Ç
      if (options.limit) {
        query = query.limit(options.limit)
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortBy = options.sort || 'display_order'
      const sortOrder = options.order === 'desc' ? { ascending: false } : { ascending: true }
      query = query.order(sortBy, sortOrder)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
      if (sortBy !== 'taken_at') {
        query = query.order('taken_at', { ascending: false })
      }
      
      const { data, error } = await query
      
      if (error) throw error
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${error.message}`)
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} photoData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
   */
  async addEventPhoto(eventId, photoData) {
    try {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_photos')
        .insert([{
          con_id: eventId,
          image_url: photoData.image_url?.trim(),
          thumbnail_url: photoData.thumbnail_url?.trim(),
          caption: photoData.caption?.trim(),
          alt_text: photoData.alt_text?.trim(),
          photo_type: photoData.photo_type || 'general',
          is_featured: photoData.is_featured || false,
          is_avatar: photoData.is_avatar || false,
          taken_at: photoData.taken_at,
          taken_by: photoData.taken_by?.trim(),
          camera_info: photoData.camera_info?.trim(),
          width: photoData.width,
          height: photoData.height,
          file_size: photoData.file_size,
          format: photoData.format,
          latitude: photoData.latitude,
          longitude: photoData.longitude,
          display_order: photoData.display_order || 0,
          copyright_holder: photoData.copyright_holder?.trim(),
          license: photoData.license || 'personal_use',
          exif_data: photoData.exif_data || {}
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞')
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
   * @param {string} photoId - ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
   */
  async updateEventPhoto(photoId, updateData) {
    try {
      const { data, error } = await supabase
        .from('con_photos')
        .update(updateData)
        .eq('id', photoId)
        .select('*')
        .single()
      
      if (error) throw error
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
   * @param {string} photoId - ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteEventPhoto(photoId) {
    try {
      const { error } = await supabase
        .from('con_photos')
        .delete()
        .eq('id', photoId)
      
      if (error) throw error
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${error.message}`)
    }
  },

  // ============================================
  // üõí –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ö–£–ü–û–ö (CON_PURCHASES)
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
   */
  async getEventPurchases(eventId, options = {}) {
    try {
      console.log('üõí –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      let query = supabase
        .from('con_purchases')
        .select('*')
        .eq('con_id', eventId)
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (options.category) {
        query = query.eq('category', options.category)
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É
      if (options.vendor_name) {
        query = query.ilike('vendor_name', `%${options.vendor_name}%`)
      }
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (options.status) {
        query = query.eq('status', options.status)
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
        query = query.eq('status', 'completed')
      }
      
      // –õ–∏–º–∏—Ç
      if (options.limit) {
        query = query.limit(options.limit)
      }
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sortBy = options.sort || 'purchased_at'
      const sortOrder = options.order === 'asc' ? { ascending: true } : { ascending: false }
      query = query.order(sortBy, sortOrder)
      
      const { data, error } = await query
      
      if (error) throw error
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –ø–æ–∫—É–ø–æ–∫`)
      return data || []
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∫—É–ø–æ–∫: ${error.message}`)
    }
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {Object} purchaseData - –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
   */
  async addEventPurchase(eventId, purchaseData) {
    try {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', eventId)
      
      const { data, error } = await supabase
        .from('con_purchases')
        .insert([{
          con_id: eventId,
          item_name: purchaseData.item_name?.trim(),
          description: purchaseData.description?.trim(),
          brand: purchaseData.brand?.trim(),
          model: purchaseData.model?.trim(),
          price: purchaseData.price || 0,
          currency: purchaseData.currency || 'RUB',
          original_price: purchaseData.original_price,
          discount_percent: purchaseData.discount_percent,
          vendor_name: purchaseData.vendor_name?.trim(),
          vendor_type: purchaseData.vendor_type || 'unknown',
          booth_number: purchaseData.booth_number?.trim(),
          category: purchaseData.category || 'other',
          image_url: purchaseData.image_url?.trim(),
          gallery_urls: purchaseData.gallery_urls || [],
          receipt_photo: purchaseData.receipt_photo?.trim(),
          quantity: purchaseData.quantity || 1,
          size: purchaseData.size?.trim(),
          color: purchaseData.color?.trim(),
          material: purchaseData.material?.trim(),
          condition: purchaseData.condition || 'new',
          rating: purchaseData.rating,
          review: purchaseData.review?.trim(),
          purchased_at: purchaseData.purchased_at || new Date().toISOString(),
          delivery_date: purchaseData.delivery_date,
          status: purchaseData.status || 'completed',
          is_commission: purchaseData.is_commission || false,
          is_limited_edition: purchaseData.is_limited_edition || false,
          is_signed: purchaseData.is_signed || false,
          is_gift: purchaseData.is_gift || false,
          tags: purchaseData.tags || [],
          extra_data: purchaseData.extra_data || {}
        }])
        .select('*')
        .single()
      
      if (error) throw error
      
      console.log('‚úÖ –ü–æ–∫—É–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', data.item_name)
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: ${error.message}`)
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É
   * @param {string} purchaseId - ID –ø–æ–∫—É–ø–∫–∏
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
   */
  async updateEventPurchase(purchaseId, updateData) {
    try {
      const { data, error } = await supabase
        .from('con_purchases')
        .update(updateData)
        .eq('id', purchaseId)
        .select('*')
        .single()
      
      if (error) throw error
      return data
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: ${error.message}`)
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∫—É
   * @param {string} purchaseId - ID –ø–æ–∫—É–ø–∫–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteEventPurchase(purchaseId) {
    try {
      const { error } = await supabase
        .from('con_purchases')
        .delete()
        .eq('id', purchaseId)
      
      if (error) throw error
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error)
      throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: ${error.message}`)
    }
  },

  // ============================================
  // üìä –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getEventsStats() {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π')
      
      const { data, error } = await supabase
        .rpc('get_events_overview')
      
      if (error) throw error
      
      const stats = data?.[0] || {
        total_events: 0,
        upcoming_events: 0,
        completed_events: 0,
        total_photos: 0,
        total_purchases: 0,
        total_spent: 0,
        avg_rating: 0
      }
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      const formattedStats = {
        total: stats.total_events,
        upcoming: stats.upcoming_events,
        completed: stats.completed_events,
        totalPhotos: stats.total_photos,
        totalPurchases: stats.total_purchases,
        totalSpent: parseFloat(stats.total_spent) || 0,
        averageRating: parseFloat(stats.avg_rating) || 0
      }
      
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', formattedStats)
      return formattedStats
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        total: 0,
        upcoming: 0,
        completed: 0,
        totalPhotos: 0,
        totalPurchases: 0,
        totalSpent: 0,
        averageRating: 0
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  async getEventStats(eventId) {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)
      
      const { data, error } = await supabase
        .from('events_full_stats')
        .select('photos_count, purchases_count, total_items_purchased, links_count, features_count, total_spent')
        .eq('id', eventId)
        .single()
      
      if (error) throw error
      
      return {
        photosCount: data.photos_count || 0,
        purchasesCount: data.purchases_count || 0,
        totalItems: data.total_items_purchased || 0,
        linksCount: data.links_count || 0,
        featuresCount: data.features_count || 0,
        totalSpent: parseFloat(data.total_spent) || 0
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      return {
        photosCount: 0,
        purchasesCount: 0,
        totalItems: 0,
        linksCount: 0,
        featuresCount: 0,
        totalSpent: 0
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫—É–ø–æ–∫
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @returns {Promise<Array>} –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getTopPurchaseCategories(limit = 10) {
    try {
      const { data, error } = await supabase
        .from('con_purchases')
        .select('category, price, quantity')
        .eq('status', 'completed')
      
      if (error) throw error
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categoryStats = {}
      data.forEach(purchase => {
        const category = purchase.category || 'other'
        if (!categoryStats[category]) {
          categoryStats[category] = {
            category,
            count: 0,
            totalSpent: 0,
            totalItems: 0
          }
        }
        categoryStats[category].count += 1
        categoryStats[category].totalSpent += (purchase.price * purchase.quantity)
        categoryStats[category].totalItems += purchase.quantity
      })
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫
      return Object.values(categoryStats)
        .sort((a, b) => b.totalSpent - a.totalSpent)
        .slice(0, limit)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      return []
    }
  },

  // ============================================
  // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   * @returns {Object} –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @private
   */
  _cleanEventData(eventData) {
    const cleanData = {}
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (eventData.name) cleanData.name = eventData.name.trim()
    if (eventData.slug) cleanData.slug = eventData.slug.trim().toLowerCase()
    if (eventData.event_date) cleanData.event_date = eventData.event_date
    if (eventData.location) cleanData.location = eventData.location.trim()
    
    // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    const stringFields = [
      'subtitle', 'description', 'short_description', 'city', 'country', 
      'address', 'venue_url', 'banner_url', 'logo_url', 'gallery_folder',
      'my_role', 'my_review', 'meta_title', 'meta_description', 'og_image',
      'official_website', 'tickets_url', 'currency'
    ]
    
    stringFields.forEach(field => {
      if (eventData[field] && typeof eventData[field] === 'string') {
        cleanData[field] = eventData[field].trim()
      }
    })
    
    // –î–∞—Ç—ã
    const dateFields = [
      'announced_date', 'registration_start', 'registration_end'
    ]
    
    dateFields.forEach(field => {
      if (eventData[field]) {
        cleanData[field] = eventData[field]
      }
    })
    
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
    if (eventData.status) cleanData.status = eventData.status
    if (eventData.event_type) cleanData.event_type = eventData.event_type
    if (eventData.attendance_status) cleanData.attendance_status = eventData.attendance_status
    
    // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    const numberFields = [
      'attendees_count', 'expected_visitors', 'my_rating', 
      'entrance_fee', 'total_spent'
    ]
    
    numberFields.forEach(field => {
      if (eventData[field] !== undefined && eventData[field] !== null && eventData[field] !== '') {
        const num = parseFloat(eventData[field])
        if (!isNaN(num)) {
          cleanData[field] = num
        }
      }
    })
    
    // –ë—É–ª–µ–≤—ã –ø–æ–ª—è
    const booleanFields = [
      'has_dealers_den', 'has_art_show', 'has_fursuit_parade', 'has_competitions',
      'is_featured', 'is_nsfw', 'is_online'
    ]
    
    booleanFields.forEach(field => {
      if (eventData[field] !== undefined) {
        cleanData[field] = Boolean(eventData[field])
      }
    })
    
    // JSON –ø–æ–ª—è
    if (eventData.extra_data && typeof eventData.extra_data === 'object') {
      cleanData.extra_data = eventData.extra_data
    }
    
    return cleanData
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async testConnection() {
    try {
      const { data, error } = await supabase
        .from('cons')
        .select('count')
        .limit(1)
      
      if (error) throw error
      
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      return true
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase:', error)
      return false
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
   */
  async getTableInfo() {
    try {
      const tables = []
      
      const tablesData = await Promise.allSettled([
        supabase.from('cons').select('count', { count: 'exact', head: true }),
        supabase.from('con_links').select('count', { count: 'exact', head: true }),
        supabase.from('con_features').select('count', { count: 'exact', head: true }),
        supabase.from('con_photos').select('count', { count: 'exact', head: true }),
        supabase.from('con_purchases').select('count', { count: 'exact', head: true })
      ])
      
      const tableNames = ['cons', 'con_links', 'con_features', 'con_photos', 'con_purchases']
      
      tablesData.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          tables.push({
            name: tableNames[index],
            count: result.value.count || 0,
            status: 'ok'
          })
        } else {
          tables.push({
            name: tableNames[index],
            count: 0,
            status: 'error',
            error: result.reason?.message
          })
        }
      })
      
      return tables
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:', error)
      return []
    }
  }
}

// ===============================================
// üöÄ –≠–ö–°–ü–û–†–¢ API
// ===============================================

export default furryApi

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { furryApi as eventApi, furryApi as consApi }

console.log('üé™ FoxTaffy Events API initialized successfully!')